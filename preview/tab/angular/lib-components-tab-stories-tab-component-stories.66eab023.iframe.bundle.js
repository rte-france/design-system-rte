(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[40855],{"./projects/ds-rte-lib/src/lib/components/tab/stories/tab.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,IconsOnly:()=>IconsOnly,KeyboardInteraction:()=>KeyboardInteraction,Vertical:()=>Vertical,WithBadge:()=>WithBadge,WithIcons:()=>WithIcons,__namedExportsOrder:()=>__namedExportsOrder,default:()=>tab_component_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),keyboard_test_constants=__webpack_require__("../core/constants/keyboard/keyboard-test.constants.ts"),dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var tab_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/tab/tab.component.scss?ngResource"),tab_componentngResource_default=__webpack_require__.n(tab_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),keyboard_constants=__webpack_require__("../core/constants/keyboard/keyboard.constants.ts");var tab_item_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/tab/tab-item/tab-item.component.scss?ngResource"),tab_item_componentngResource_default=__webpack_require__.n(tab_item_componentngResource),badge_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/badge/badge.component.ts"),icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts");let TabItemComponent=class TabItemComponent{constructor(){this.direction=(0,core.input)("horizontal"),this.option=(0,core.input)(),this.compactSpacing=(0,core.input)(),this.isSelected=(0,core.input)(!1),this.click=(0,core.output)(),this.handleKeydown=(0,core.input)(),this.tabItemRef=(0,core.viewChild)("tabItem"),this.hoverIndicatorStyle=(0,core.signal)(null),this.displayBadge=option=>!!(option.badgeAppearance||option.badgeType||option.badgeIcon||option.badgeCount)}ngAfterViewInit(){if(this.tabItemRef&&this.tabItemRef()?.nativeElement){if(this.option()?.disabled)return;"horizontal"===this.direction()?this.hoverIndicatorStyle.set({width:this.tabItemRef()?.nativeElement.offsetWidth,height:2,left:this.tabItemRef()?.nativeElement.offsetLeft,top:this.tabItemRef()?this.tabItemRef().nativeElement.offsetTop+this.tabItemRef().nativeElement.offsetHeight:void 0,opacity:0}):this.hoverIndicatorStyle.set({width:2,height:this.tabItemRef()?.nativeElement.offsetHeight,left:void 0!==this.tabItemRef()?.nativeElement.offsetLeft?this.tabItemRef().nativeElement.offsetLeft-2:void 0,top:this.tabItemRef().nativeElement.offsetTop,opacity:0})}}onClickTabItem(id){this.hoverIndicatorStyle.set({...this.hoverIndicatorStyle(),opacity:0}),console.log("Tab item clicked:",id),this.isSelected()||this.click.emit(id)}handleMouseHover(){this.isSelected()||this.hoverIndicatorStyle.set({...this.hoverIndicatorStyle(),opacity:1})}handleMouseOut(){this.hoverIndicatorStyle.set({...this.hoverIndicatorStyle(),opacity:0})}static{this.propDecorators={direction:[{type:core.Input,args:[{isSignal:!0,alias:"direction",required:!1,transform:void 0}]}],option:[{type:core.Input,args:[{isSignal:!0,alias:"option",required:!1,transform:void 0}]}],compactSpacing:[{type:core.Input,args:[{isSignal:!0,alias:"compactSpacing",required:!1,transform:void 0}]}],isSelected:[{type:core.Input,args:[{isSignal:!0,alias:"isSelected",required:!1,transform:void 0}]}],click:[{type:core.Output,args:["click"]}],handleKeydown:[{type:core.Input,args:[{isSignal:!0,alias:"handleKeydown",required:!1,transform:void 0}]}],tabItemRef:[{type:core.ViewChild,args:["tabItem",{isSignal:!0}]}]}}};TabItemComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-tab-item",imports:[common.CommonModule,icon_component.R,badge_component.n],standalone:!0,template:'<button\n  #tabItem\n  class="rte-tabitem"\n  role="tab"\n  [id]="option()?.id"\n  [attr.aria-selected]="isSelected()"\n  [attr.aria-controls]="option()?.panelId"\n  [tabIndex]="isSelected() ? 0 : -1"\n  [attr.data-selected]="isSelected()"\n  [attr.data-compact-spacing]="compactSpacing()"\n  [attr.data-disabled]="option()?.disabled"\n  (click)="onClickTabItem(option()?.id || \'\')"\n  (mouseover)="handleMouseHover()"\n  (mouseout)="handleMouseOut()"\n  (keydown)="handleKeydown()"\n>\n  <rte-icon\n    *ngIf="option()?.icon"\n    [name]="option()?.icon || \'\'"\n    [appearance]="isSelected() ? \'filled\' : \'outlined\'"\n  />\n  <span *ngIf="option()?.label">{{ option()?.label }}</span>\n  <rte-badge\n    *ngIf="displayBadge(option()!)"\n    [simpleBadge]="true"\n    [badgeAppearance]="option()?.badgeAppearance || \'empty\'"\n    [badgeType]="option()?.badgeType || \'neutral\'"\n    [icon]="option()?.badgeIcon || \'\'"\n    [count]="option()?.badgeCount"\n  />\n</button>\n<span\n  #hoverIndicator\n  class="rte-tab-hover-indicator"\n  [attr.data-disabled]="option()?.disabled"\n  [id]="\'tab-hover-indicator\' + option()?.id"\n  [ngStyle]="{\n    width: hoverIndicatorStyle()?.width + \'px\',\n    left: hoverIndicatorStyle()?.left + \'px\',\n    top: hoverIndicatorStyle()?.top + \'px\',\n    height: hoverIndicatorStyle()?.height + \'px\',\n    opacity: hoverIndicatorStyle()?.opacity,\n  }"\n></span>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[tab_item_componentngResource_default()]})],TabItemComponent);let TabComponent=class TabComponent{constructor(){this.alignment=(0,core.input)("start"),this.direction=(0,core.input)("horizontal"),this.options=(0,core.input)([]),this.selectedTabId=(0,core.input)(),this.compactSpacing=(0,core.input)(!1),this.sliderLeft=(0,core.signal)(0),this.sliderWidth=(0,core.signal)(2),this.sliderTop=(0,core.signal)(0),this.sliderHeight=(0,core.signal)(2),this.tabItemRefs=(0,core.viewChildren)("tabItem"),this.hoverIndicatorRefs=(0,core.viewChildren)("hoverIndicator"),this.selectedTabRef=(0,core.computed)(()=>{const idx=this.options().findIndex(opt=>opt.id===this.selectedTabId());return this.tabItemRefs()[idx]}),this.hoverIndicatorStyle=(0,core.signal)(null),this.change=(0,core.output)(),this.displayBadge=option=>!!option.showBadge||void 0!==option.badgeCount&&option.badgeCount>0&&"text"===option.badgeAppearance||"icon"===option.badgeAppearance&&!!option.badgeIcon,this.tabItemSelectedIndicatorStyle=(0,core.computed)(()=>({left:`${this.sliderLeft()}px`,top:`${this.sliderTop()}px`,width:`${this.sliderWidth()}px`,height:`${this.sliderHeight()}px`})),this.onKeydownTabItem=event=>{[keyboard_constants.ST,keyboard_constants.Zh].includes(event.key)&&(event.preventDefault(),event.key===keyboard_constants.Zh?(console.log("event.key:",event.key),this.focusItem("next")):this.focusItem("previous"))},this.onClickTabItem=id=>{id!==this.selectedTabId()&&this.change.emit(id)},this.focusItem=direction=>{const currentIndex=this.tabItemRefs().findIndex(tab=>tab===this.selectedTabRef()),maxIterations=this.tabItemRefs().length;let newIndex=this.computeNextItemIndex(currentIndex,maxIterations,direction),counter=0;for(;"true"===this.tabItemRefs()[newIndex].tabItemRef()?.nativeElement.getAttribute("data-disabled")&&counter<maxIterations;)console.log("Tab item is disabled, moving to next/previous"),newIndex=this.computeNextItemIndex(newIndex,maxIterations,direction),counter++;this.tabItemRefs()[newIndex].tabItemRef()?.nativeElement.focus(),this.tabItemRefs()[newIndex].tabItemRef()?.nativeElement.click()}}isSelected(id){return this.selectedTabId()===id}ngAfterViewInit(){this.updateSelectedTabItemIndicator(),window.addEventListener("resize",this.updateSelectedTabItemIndicator.bind(this)),this.hoverIndicatorRefs().forEach(hoverIndicator=>{hoverIndicator.nativeElement.style.opacity="0"})}ngOnChanges(changes){changes.selectedTabId&&(console.log("selectedTabId changed:",changes.selectedTabId),this.updateSelectedTabItemIndicator())}computeNextItemIndex(currentIndex,totalItems,direction){return"next"===direction?(currentIndex+1)%totalItems:(currentIndex-1+totalItems)%totalItems}computeIndicatorStyle(tabItem){return"horizontal"===this.direction()?{width:tabItem.offsetWidth,left:tabItem.offsetLeft,top:tabItem.offsetTop+tabItem.offsetHeight}:{left:tabItem.offsetLeft-2,top:tabItem.offsetTop,height:tabItem.offsetHeight}}updateSelectedTabItemIndicator(){const idx=this.options().findIndex(opt=>opt.id===this.selectedTabId()),tabItem=this.tabItemRefs()[idx];if(tabItem&&tabItem.tabItemRef){if(tabItem.option()?.disabled)return;const tabItemRef=tabItem.tabItemRef?.();if(tabItemRef&&tabItemRef.nativeElement){const tabItemElement=tabItemRef.nativeElement,indicatorStyle=this.computeIndicatorStyle(tabItemElement);this.sliderHeight.set(indicatorStyle.height??2),this.sliderTop.set(indicatorStyle.top),this.sliderWidth.set(indicatorStyle.width??2),this.sliderLeft.set(indicatorStyle.left)}}}static{this.propDecorators={alignment:[{type:core.Input,args:[{isSignal:!0,alias:"alignment",required:!1,transform:void 0}]}],direction:[{type:core.Input,args:[{isSignal:!0,alias:"direction",required:!1,transform:void 0}]}],options:[{type:core.Input,args:[{isSignal:!0,alias:"options",required:!1,transform:void 0}]}],selectedTabId:[{type:core.Input,args:[{isSignal:!0,alias:"selectedTabId",required:!1,transform:void 0}]}],compactSpacing:[{type:core.Input,args:[{isSignal:!0,alias:"compactSpacing",required:!1,transform:void 0}]}],tabItemRefs:[{type:core.ViewChildren,args:["tabItem",{isSignal:!0}]}],hoverIndicatorRefs:[{type:core.ViewChildren,args:["hoverIndicator",{isSignal:!0}]}],change:[{type:core.Output,args:["change"]}]}}};TabComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-tab",imports:[common.CommonModule,TabItemComponent],standalone:!0,template:'<div\n  role="tablist"\n  aria-label="Sample Tabs"\n  class="rte-tab-container"\n  [attr.data-alignment]="alignment()"\n  [attr.data-direction]="direction()"\n>\n  <span\n    class="rte-tab-selected-indicator"\n    [ngStyle]="tabItemSelectedIndicatorStyle()"\n  ></span>\n  <ng-container *ngFor="let option of options(); let idx = index">\n    \x3c!-- <button\n      #tabItem\n      class="rte-tabitem"\n      role="tab"\n      [id]="option.id"\n      [attr.aria-selected]="isSelected(option.id)"\n      [attr.aria-controls]="option.panelId"\n      [tabIndex]="isSelected(option.id) ? 0 : -1"\n      [attr.data-selected]="isSelected(option.id)"\n      [attr.data-compact-spacing]="compactSpacing()"\n      [attr.data-disabled]="option.disabled"\n      (click)="onClickTabItem(option.id)"\n      (keydown)="onKeydownTabItem($event)"\n      (mouseover)="handleMouseHover($event)"\n      (mouseout)="handleMouseOut($event)"\n    >\n      <rte-icon\n        *ngIf="option.icon"\n        [name]="option.icon"\n        [appearance]="isSelected(option.id) ? \'filled\' : \'outlined\'"\n      />\n      <span *ngIf="option.label">{{ option.label }}</span>\n      <rte-badge\n        *ngIf="displayBadge(option)"\n        [simpleBadge]="true"\n        [badgeAppearance]="option.badgeAppearance || \'empty\'"\n        [badgeType]="option.badgeType || \'neutral\'"\n        [icon]="option.badgeIcon || \'\'"\n        [count]="option.badgeCount"\n      />\n    </button>\n    <span\n      #hoverIndicator\n      [attr.data-disabled]="option.disabled"\n      class="rte-tab-hover-indicator"\n      [id]="\'tab-hover-indicator\' + option.id"\n    ></span> --\x3e\n    <rte-tab-item\n      #tabItem\n      [option]="option"\n      [compactSpacing]="compactSpacing()"\n      [isSelected]="isSelected(option.id)"\n      (keydown)="onKeydownTabItem($event)"\n      (click)="onClickTabItem(option.id)"\n    ></rte-tab-item>\n  </ng-container>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[tab_componentngResource_default()]})],TabComponent);const tab_component_stories={title:"Tab",component:TabComponent,tags:["autodocs"],argTypes:{options:{control:"object"},alignment:{control:"select",options:["start","center"]},direction:{control:"select",options:["horizontal","vertical"]},selectedTabId:{control:"text"},compactSpacing:{control:"boolean"}}},Default={args:{options:[{id:"tab-1",label:"First Tab",panelId:"panel-1",disabled:!0},{id:"tab-2",label:"Second Tab",panelId:"panel-2"},{id:"tab-3",label:"Third Tab",panelId:"panel-3"}],selectedTabId:"tab-1",alignment:"start",compactSpacing:!1,direction:"horizontal"},render:args=>({props:{...args,change(id){this.selectedTabId=id}},template:'\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    '})},Vertical={args:{...Default.args,options:[{id:"tab-1",label:"First Tab",panelId:"panel-1"},{id:"tab-2",label:"Second Tab",panelId:"panel-2"},{id:"tab-3",label:"Third Tab",panelId:"panel-3"}],selectedTabId:"tab-1",alignment:"start",direction:"vertical"},render:args=>({props:{...args,change(id){console.log("Tab changed to:",id),this.selectedTabId=id}},template:'\n    <div style="display: flex; gap: 16px; height: 200px">\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="width: 100%; border: 1px solid #ccc; padding: 8px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    '})},WithIcons={args:{options:[{id:"photos",label:"Photos",panelId:"panel-1",icon:"photo-camera"},{id:"videos",label:"Vidéos",panelId:"panel-2",icon:"video-camera"},{id:"musique",label:"Musique",panelId:"panel-3",icon:"headphones"}],selectedTabId:"photos",alignment:"start",compactSpacing:!1,direction:"horizontal"},render:args=>({props:{...args,change(id){this.selectedTabId=id}},template:'\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    '})},IconsOnly={args:{options:[{id:"home",panelId:"panel-1",icon:"home"},{id:"bookmarks",panelId:"panel-2",icon:"bookmarks"},{id:"chat",panelId:"panel-3",icon:"chat"},{id:"settings",panelId:"panel-3",icon:"settings"}],selectedTabId:"home",alignment:"start",compactSpacing:!1,direction:"horizontal"},render:args=>({props:{...args,change(id){this.selectedTabId=id}},template:'\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'home\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'bookmarks\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'chat\'" id="panel-3">\n            Content for Third Tab\n          </div>\n          <div *ngIf="selectedTabId === \'settings\'" id="panel-3">\n            Content for Fourth Tab\n          </div>\n        </div>\n    </div>\n    '})},WithBadge={args:{options:[{id:"photos",label:"Photos",panelId:"panel-1",icon:"photo-camera",badgeCount:5,badgeAppearance:"text",badgeType:"indicator",showBadge:!0},{id:"videos",label:"Vidéos",panelId:"panel-2",icon:"video-camera"},{id:"musique",label:"Musique",panelId:"panel-3",icon:"headphones"}],selectedTabId:"photos",alignment:"start",compactSpacing:!1,direction:"horizontal"},render:args=>({props:{...args,change(id){this.selectedTabId=id}},template:'\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'photos\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'videos\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'musique\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    '})},KeyboardInteraction={args:{options:[{id:"tab-1",label:"First Tab",panelId:"panel-1"},{id:"tab-2",label:"Second Tab",panelId:"panel-2"},{id:"tab-3",label:"Third Tab",panelId:"panel-3"}],selectedTabId:"tab-1",alignment:"start",compactSpacing:!1,direction:"horizontal"},render:args=>({props:{...args,change(id){this.selectedTabId=id}},template:'\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    '}),play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement,step}){const canvas=(0,dist.ux)(canvasElement),firstTab=yield canvas.getByRole("tab",{name:"First Tab"}),secondTab=yield canvas.getByRole("tab",{name:"Second Tab"}),thirdTab=yield canvas.getByRole("tab",{name:"Third Tab"}),expectTabToBeSelected=function(){var _ref2=(0,asyncToGenerator.A)(function*(tab){(0,dist.E3)(tab).toHaveAttribute("aria-selected","true"),(0,dist.E3)(tab).toHaveFocus(),(0,dist.E3)(canvas.getByText(`Content for ${tab.textContent}`)).toBeVisible()});return function expectTabToBeSelected(_x2){return _ref2.apply(this,arguments)}}();yield step("Focus on the first tab and select it",(0,asyncToGenerator.A)(function*(){yield dist.Q4.tab(),expectTabToBeSelected(firstTab)})),yield step("Navigate to the second tab and select it",(0,asyncToGenerator.A)(function*(){yield dist.Q4.keyboard(keyboard_test_constants.s1),expectTabToBeSelected(secondTab)})),yield step("Navigate to the second tab and select it",(0,asyncToGenerator.A)(function*(){yield dist.Q4.keyboard(keyboard_test_constants.s1),expectTabToBeSelected(thirdTab)})),yield step("Navigate back to the first tab when there are no next tabs",(0,asyncToGenerator.A)(function*(){yield dist.Q4.keyboard(keyboard_test_constants.s1),expectTabToBeSelected(firstTab)})),yield step("Navigate back to the third tab and select it",(0,asyncToGenerator.A)(function*(){yield dist.Q4.keyboard(keyboard_test_constants.ZX),expectTabToBeSelected(thirdTab)}))}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const __namedExportsOrder=["Default","Vertical","WithIcons","IconsOnly","WithBadge","KeyboardInteraction"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    options: [{\n      id: "tab-1",\n      label: "First Tab",\n      panelId: "panel-1",\n      disabled: true\n    }, {\n      id: "tab-2",\n      label: "Second Tab",\n      panelId: "panel-2"\n    }, {\n      id: "tab-3",\n      label: "Third Tab",\n      panelId: "panel-3"\n    }],\n    selectedTabId: "tab-1",\n    alignment: "start",\n    compactSpacing: false,\n    direction: "horizontal"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    `\n  })\n}',...Default.parameters?.docs?.source}}},Vertical.parameters={...Vertical.parameters,docs:{...Vertical.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    options: [{\n      id: "tab-1",\n      label: "First Tab",\n      panelId: "panel-1"\n    }, {\n      id: "tab-2",\n      label: "Second Tab",\n      panelId: "panel-2"\n    }, {\n      id: "tab-3",\n      label: "Third Tab",\n      panelId: "panel-3"\n    }],\n    selectedTabId: "tab-1",\n    alignment: "start",\n    direction: "vertical"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        console.log("Tab changed to:", id);\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div style="display: flex; gap: 16px; height: 200px">\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="width: 100%; border: 1px solid #ccc; padding: 8px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    `\n  })\n}',...Vertical.parameters?.docs?.source}}},WithIcons.parameters={...WithIcons.parameters,docs:{...WithIcons.parameters?.docs,source:{originalSource:'{\n  args: {\n    options: [{\n      id: "photos",\n      label: "Photos",\n      panelId: "panel-1",\n      icon: "photo-camera"\n    }, {\n      id: "videos",\n      label: "Vidéos",\n      panelId: "panel-2",\n      icon: "video-camera"\n    }, {\n      id: "musique",\n      label: "Musique",\n      panelId: "panel-3",\n      icon: "headphones"\n    }],\n    selectedTabId: "photos",\n    alignment: "start",\n    compactSpacing: false,\n    direction: "horizontal"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    `\n  })\n}',...WithIcons.parameters?.docs?.source}}},IconsOnly.parameters={...IconsOnly.parameters,docs:{...IconsOnly.parameters?.docs,source:{originalSource:'{\n  args: {\n    options: [{\n      id: "home",\n      panelId: "panel-1",\n      icon: "home"\n    }, {\n      id: "bookmarks",\n      panelId: "panel-2",\n      icon: "bookmarks"\n    }, {\n      id: "chat",\n      panelId: "panel-3",\n      icon: "chat"\n    }, {\n      id: "settings",\n      panelId: "panel-3",\n      icon: "settings"\n    }],\n    selectedTabId: "home",\n    alignment: "start",\n    compactSpacing: false,\n    direction: "horizontal"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'home\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'bookmarks\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'chat\'" id="panel-3">\n            Content for Third Tab\n          </div>\n          <div *ngIf="selectedTabId === \'settings\'" id="panel-3">\n            Content for Fourth Tab\n          </div>\n        </div>\n    </div>\n    `\n  })\n}',...IconsOnly.parameters?.docs?.source}}},WithBadge.parameters={...WithBadge.parameters,docs:{...WithBadge.parameters?.docs,source:{originalSource:'{\n  args: {\n    options: [{\n      id: "photos",\n      label: "Photos",\n      panelId: "panel-1",\n      icon: "photo-camera",\n      badgeCount: 5,\n      badgeAppearance: "text",\n      badgeType: "indicator",\n      showBadge: true\n    }, {\n      id: "videos",\n      label: "Vidéos",\n      panelId: "panel-2",\n      icon: "video-camera"\n    }, {\n      id: "musique",\n      label: "Musique",\n      panelId: "panel-3",\n      icon: "headphones"\n    }],\n    selectedTabId: "photos",\n    alignment: "start",\n    compactSpacing: false,\n    direction: "horizontal"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'photos\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'videos\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'musique\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    `\n  })\n}',...WithBadge.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    options: [{\n      id: "tab-1",\n      label: "First Tab",\n      panelId: "panel-1"\n    }, {\n      id: "tab-2",\n      label: "Second Tab",\n      panelId: "panel-2"\n    }, {\n      id: "tab-3",\n      label: "Third Tab",\n      panelId: "panel-3"\n    }],\n    selectedTabId: "tab-1",\n    alignment: "start",\n    compactSpacing: false,\n    direction: "horizontal"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      change(id: string) {\n        this["selectedTabId"] = id;\n      }\n    },\n    template: `\n    <div>\n      <rte-tab\n        [options]="options"\n        [selectedTabId]="selectedTabId"\n        (change)="change($event)"\n        [direction]="direction"\n        [alignment]="alignment"\n        [compactSpacing]="compactSpacing"\n        />\n        <div style="height: 100px; border: 1px solid #ccc; padding: 8px; marginTop: 16px">\n          <div *ngIf="selectedTabId === \'tab-1\'" id="panel-1">\n            Content for First Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-2\'" id="panel-2">\n            Content for Second Tab\n          </div>\n          <div *ngIf="selectedTabId === \'tab-3\'" id="panel-3">\n            Content for Third Tab\n          </div>\n        </div>\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement,\n    step\n  }) => {\n    const canvas = within(canvasElement);\n    const firstTab = await canvas.getByRole("tab", {\n      name: "First Tab"\n    });\n    const secondTab = await canvas.getByRole("tab", {\n      name: "Second Tab"\n    });\n    const thirdTab = await canvas.getByRole("tab", {\n      name: "Third Tab"\n    });\n    const expectTabToBeSelected = async (tab: HTMLElement) => {\n      expect(tab).toHaveAttribute("aria-selected", "true");\n      expect(tab).toHaveFocus();\n      expect(canvas.getByText(`Content for ${tab.textContent}`)).toBeVisible();\n    };\n    await step("Focus on the first tab and select it", async () => {\n      await userEvent.tab();\n      expectTabToBeSelected(firstTab);\n    });\n    await step("Navigate to the second tab and select it", async () => {\n      await userEvent.keyboard(TESTING_ARROW_RIGHT_KEY);\n      expectTabToBeSelected(secondTab);\n    });\n    await step("Navigate to the second tab and select it", async () => {\n      await userEvent.keyboard(TESTING_ARROW_RIGHT_KEY);\n      expectTabToBeSelected(thirdTab);\n    });\n    await step("Navigate back to the first tab when there are no next tabs", async () => {\n      await userEvent.keyboard(TESTING_ARROW_RIGHT_KEY);\n      expectTabToBeSelected(firstTab);\n    });\n    await step("Navigate back to the third tab and select it", async () => {\n      await userEvent.keyboard(TESTING_ARROW_LEFT_KEY);\n      expectTabToBeSelected(thirdTab);\n    });\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/tab/tab-item/tab-item.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,':host {\n  pointer-events: none;\n}\n\n.rte-tabitem {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  position: relative;\n  pointer-events: auto;\n  display: flex;\n  padding: 12px;\n  justify-content: center;\n  align-items: center;\n  gap: 12px;\n  background: transparent;\n  color: var(--content-secondary);\n  cursor: pointer;\n  border: none;\n  text-align: left;\n}\n.rte-tabitem[data-selected=true]:not([data-disabled=true]), .rte-tabitem:hover:not([data-disabled=true]) {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n}\n.rte-tabitem[data-disabled=true] {\n  color: var(--content-disabled);\n  cursor: not-allowed;\n}\n.rte-tabitem[data-compact-spacing=true] {\n  padding: 4px 12px;\n}\n.rte-tabitem:focus-visible {\n  z-index: 1;\n  outline: 2px solid var(--border-brand-focused);\n}\n\n.rte-tab-hover-indicator {\n  position: absolute;\n  top: 4px;\n  height: 2px;\n  width: 2px;\n  background: var(--background-neutral-regular-hover);\n  opacity: 0;\n  transition: left 0.2s ease, width 0.2s ease;\n}\n.rte-tab-hover-indicator[data-disabled=true] {\n  display: none;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/tab/tab.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,".rte-tab-container {\n  display: flex;\n  align-items: flex-start;\n  gap: 24px;\n  justify-content: flex-start;\n  align-self: stretch;\n  border-bottom: 2px solid var(--background-neutral-regular-default);\n}\n.rte-tab-container[data-direction=vertical] {\n  flex-direction: column;\n  border-bottom: none;\n  border-left: 2px solid var(--background-neutral-regular-default);\n  gap: 4px;\n  height: 100%;\n}\n.rte-tab-container[data-direction=vertical] .rte-tab-selected-indicator {\n  width: 2px;\n  transition: top 0.2s ease, height 0.2s ease;\n}\n.rte-tab-container[data-alignment=center] {\n  justify-content: center;\n}\n.rte-tab-container .rte-tab-selected-indicator {\n  position: absolute;\n  top: 4px;\n  height: 2px;\n  background: var(--background-brand-selected-default);\n  transition: left 0.2s ease, width 0.2s ease;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"../core/constants/keyboard/keyboard-test.constants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{G7:()=>TESTING_ENTER_KEY,ZX:()=>TESTING_ARROW_LEFT_KEY,s1:()=>TESTING_ARROW_RIGHT_KEY,u5:()=>TESTING_SPACE_KEY});var _keyboard_constants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../core/constants/keyboard/keyboard.constants.ts");const TESTING_SPACE_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.zP}}`,TESTING_ENTER_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.jD}}`,TESTING_ARROW_RIGHT_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.Zh}}`,TESTING_ARROW_LEFT_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.ST}}`},"../core/constants/keyboard/keyboard.constants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{CX:()=>DELETE_KEY,M0:()=>ARROW_UP_KEY,ST:()=>ARROW_LEFT_KEY,Zh:()=>ARROW_RIGHT_KEY,jD:()=>ENTER_KEY,oJ:()=>BACKSPACE_KEY,ot:()=>TAB_KEY,tt:()=>ARROW_DOWN_KEY,vx:()=>DOWN_KEY,zP:()=>SPACE_KEY});const SPACE_KEY=" ",ENTER_KEY="Enter",TAB_KEY="Tab",DOWN_KEY="ArrowDown",BACKSPACE_KEY="Backspace",DELETE_KEY="Delete",ARROW_LEFT_KEY="ArrowLeft",ARROW_RIGHT_KEY="ArrowRight",ARROW_UP_KEY="ArrowUp",ARROW_DOWN_KEY="ArrowDown"}}]);
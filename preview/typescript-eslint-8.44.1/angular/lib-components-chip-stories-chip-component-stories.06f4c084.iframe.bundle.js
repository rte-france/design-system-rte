(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[94885],{"./projects/ds-rte-lib/src/lib/components/chip/stories/chip.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,InputChip:()=>InputChip,MultiSelect:()=>MultiSelect,SingleSelect:()=>SingleSelect,__namedExportsOrder:()=>__namedExportsOrder,default:()=>chip_component_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),keyboard_test_constants=__webpack_require__("../core/constants/keyboard/keyboard-test.constants.ts"),keyboard_constants=__webpack_require__("../core/constants/keyboard/keyboard.constants.ts"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),test_dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),button_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/button/button.component.ts"),text_input_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var chip_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/chip/chip.component.scss?ngResource"),chip_componentngResource_default=__webpack_require__.n(chip_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs");const CHIP_TYPE_TO_ARIA_ROLE_MAP={single:"radio",multi:"checkbox",input:"option"};var icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts");let ChipComponent=class ChipComponent{constructor(){this.id=(0,core.input)(),this.label=(0,core.input)(""),this.selected=(0,core.input)(!1),this.disabled=(0,core.input)(!1),this.type=(0,core.input)("single"),this.compactSpacing=(0,core.input)(!1),this.click=(0,core.output)(),this.close=(0,core.output)(),this.isCheckable=(0,core.computed)(()=>"single"===this.type()||"multi"===this.type()),this.role=(0,core.computed)(()=>CHIP_TYPE_TO_ARIA_ROLE_MAP[this.type()]||null)}onClick(event){event.stopPropagation(),this.disabled()||this.click.emit(event)}onKeyUp(event){if(event.preventDefault(),!this.disabled())if(event.key===keyboard_constants.zP||event.key===keyboard_constants.jD){const target=event.target;target.classList.contains("chip-close-button")?target.click():this.onClick(event)}else if((event.key===keyboard_constants.oJ||event.key===keyboard_constants.CX)&&"input"===this.type()){const closeButton=event.target.querySelector(".chip-close-button");closeButton&&closeButton.click()}}onBlur(event){event.stopPropagation()}onCloseClick(event){event.stopPropagation(),this.disabled()||this.close.emit(event)}static{this.propDecorators={id:[{type:core.Input,args:[{isSignal:!0,alias:"id",required:!1,transform:void 0}]}],label:[{type:core.Input,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}],selected:[{type:core.Input,args:[{isSignal:!0,alias:"selected",required:!1,transform:void 0}]}],disabled:[{type:core.Input,args:[{isSignal:!0,alias:"disabled",required:!1,transform:void 0}]}],type:[{type:core.Input,args:[{isSignal:!0,alias:"type",required:!1,transform:void 0}]}],compactSpacing:[{type:core.Input,args:[{isSignal:!0,alias:"compactSpacing",required:!1,transform:void 0}]}],click:[{type:core.Output,args:["click"]}],close:[{type:core.Output,args:["close"]}]}}};ChipComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-chip",imports:[common.CommonModule,icon_component.R],standalone:!0,template:'<span\n  class="chip"\n  tabindex="0"\n  [attr.role]="role()"\n  [attr.data-selected]="isCheckable() ? selected() : null"\n  [attr.data-disabled]="disabled()"\n  [attr.data-compact-spacing]="compactSpacing()"\n  [attr.data-type]="type()"\n  [attr.aria-checked]="isCheckable() ? selected() : null"\n  [attr.aria-disabled]="disabled()"\n  (click)="onClick($event)"\n  (keyup)="onKeyUp($event)"\n  (blur)="onBlur($event)"\n>\n  <ng-container *ngIf="type() === \'multi\'">\n    <span class="chip-icon-container">\n      <span\n        class="chip-icon"\n        [class.chip-icon--visible]="selected()"\n        [attr.aria-hidden]="!selected()"\n      >\n        <rte-icon name="check-circle" appearance="filled" [size]="16"></rte-icon>\n      </span>\n      <span\n        class="chip-icon"\n        [class.chip-icon--visible]="!selected()"\n        [attr.aria-hidden]="selected()"\n      >\n        <rte-icon name="radio-button-empty" [size]="16"></rte-icon>\n      </span>\n    </span>\n  </ng-container>\n  <span class="chip-label" [attr.data-type]="type()">{{ label() }}</span>\n  <button\n    *ngIf="type() === \'input\'"\n    type="button"\n    class="chip-close-button"\n    [attr.aria-label]="\'Supprimer \' + label()"\n    [disabled]="disabled()"\n    [value]="label()"\n    (click)="onCloseClick($event)"\n  >\n    <rte-icon class="chip-close-button--icon" name="close" [size]="16"></rte-icon>\n  </button>\n</span>',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[chip_componentngResource_default()]})],ChipComponent);const chip_component_stories={title:"Composants/Chip/Chip",component:ChipComponent,tags:["autodocs"],argTypes:{label:{control:"text",description:"Label of the chip",defaultValue:"Chip"},disabled:{control:"boolean"},compactSpacing:{control:"boolean",description:"Whether the chip should be compact"},type:{control:"select",options:["single","multi","input"],description:"Type of the chip",defaultValue:"single"}}},Default={args:{id:"chip-1",label:"Label",selected:!1,disabled:!1,compactSpacing:!1}},SingleSelect={args:{...Default.args,type:"single"},render:args=>{const options=[{id:"all",label:"All"},{id:"option-1",label:"Option 1"},{id:"option-2",label:"Option 2"}];return{props:{...args,options,selectedChip:null,selectedLabel:"Aucune",onChipClick(optionId){this.selectedChip=this.selectedChip===optionId?null:optionId;const found=options.find(option=>option.id===this.selectedChip);this.selectedLabel=found?found.label:"Aucune"}},template:'\n        <div style="display: flex; gap: 10px;" role="radiogroup">\n          <rte-chip\n            *ngFor="let option of options"\n            [id]="option.id"\n            [label]="option.label"\n            [selected]="selectedChip === option.id"\n            [type]="type"\n            [compactSpacing]="compactSpacing"\n            (click)="onChipClick(option.id)"\n            class="chip"\n          ></rte-chip>\n        </div>\n        <p style="font-family: Arial, sans-sérif">Chip sélectionnée: {{ selectedLabel }}</p>\n      '}},play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement}){const chips=(0,test_dist.ux)(canvasElement).getAllByRole("radio");yield test_dist.Q4.click(chips[0]),(0,test_dist.E3)(chips[0]).toHaveAttribute("aria-checked","true"),yield test_dist.Q4.click(chips[1]),(0,test_dist.E3)(chips[1]).toHaveAttribute("aria-checked","true"),(0,test_dist.E3)(chips[0]).toHaveAttribute("aria-checked","false"),yield test_dist.Q4.click(chips[1]),yield test_dist.Q4.tab(),(0,test_dist.E3)(chips[2]).toHaveFocus(),yield test_dist.Q4.keyboard(keyboard_test_constants.G7),(0,test_dist.E3)(chips[2]).toHaveAttribute("aria-checked","true"),yield test_dist.Q4.keyboard(keyboard_test_constants.u5),(0,test_dist.E3)(chips[2]).toHaveAttribute("aria-checked","false")}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const MultiSelect={args:{...Default.args,type:"multi"},render:args=>({props:{...args,options:[{id:"option-1",label:"Option 1"},{id:"option-2",label:"Option 2"},{id:"option-3",label:"Option 3"}],selectedChips:new Set,displayedChips:"",onChipClick(optionId){this.selectedChips.has(optionId)?this.selectedChips.delete(optionId):this.selectedChips.add(optionId),this.displayedChips=this.options.filter(option=>this.selectedChips.has(option.id)).map(option=>option.label).join(", ")}},template:'\n        <div style="display: flex; gap: 10px;" role="group">\n          <rte-chip\n            *ngFor="let option of options"\n            [id]="option.id"\n            [label]="option.label"\n            [selected]="selectedChips.has(option.id)"\n            [type]="type"\n            [compactSpacing]="compactSpacing"\n            (click)="onChipClick(option.id)"\n            class="chip"\n          ></rte-chip>\n          </div>\n          <p style="font-family: Arial, sans-sérif">Chips sélectionnées: {{ displayedChips }}</p>\n      '}),play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement}){const chips=(0,test_dist.ux)(canvasElement).getAllByRole("checkbox");yield test_dist.Q4.click(chips[0]),(0,test_dist.E3)(chips[0]).toHaveAttribute("aria-checked","true"),yield test_dist.Q4.click(chips[1]),(0,test_dist.E3)(chips[1]).toHaveAttribute("aria-checked","true"),(0,test_dist.E3)(chips[0]).toHaveAttribute("aria-checked","true"),yield test_dist.Q4.click(chips[1]),(0,test_dist.E3)(chips[1]).toHaveAttribute("aria-checked","false"),yield test_dist.Q4.tab(),(0,test_dist.E3)(chips[2]).toHaveFocus(),yield test_dist.Q4.keyboard(keyboard_test_constants.G7),(0,test_dist.E3)(chips[2]).toHaveAttribute("aria-checked","true")}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const InputChip={decorators:[(0,dist.moduleMetadata)({imports:[button_component.Q,text_input_component.f]})],args:{...Default.args,type:"input"},render:args=>({props:{...args,inputValue:"",chipsValues:[],onChange(value){this.inputValue=value},onClose(event){const target=event.currentTarget;this.chipsValues=this.chipsValues.filter(chip=>chip!==target.value)},handleAddChip(){this.inputValue.trim()&&(this.chipsValues.push(this.inputValue),this.inputValue="")},handleKeyDown(event){const input=event.target;event.key===keyboard_constants.jD&&input.value.trim()&&(event.preventDefault(),this.handleAddChip())}},template:'\n      <div style="display: flex; flex-direction: column; gap: 10px;">\n        <div style="display: flex; gap: 10px; align-items: end;">\n        <rte-text-input\n          id="input-add-chip"\n          label="Ajouter un chip"\n          [value]="inputValue"\n          (valueChange)="onChange($event)"\n          (keydown)="handleKeyDown($event)"\n        ></rte-text-input>\n          <rte-button label="Add Chip" (click)="handleAddChip()"></rte-button>\n        </div>\n        <div style="display: flex; gap: 10px;" role="listbox" aria-label="Chips List">\n          <rte-chip\n            *ngFor="let chip of chipsValues"\n            [id]="\'chip-\' + chip"\n            [label]="chip"\n            [type]="type"\n            (close)="onClose($event)"\n          >\n          </rte-chip>\n        </div>\n      </div>\n    '}),play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,test_dist.ux)(canvasElement),input=canvas.getByRole("textbox");yield test_dist.Q4.type(input,"New Chip"),yield test_dist.Q4.keyboard(keyboard_test_constants.G7),yield test_dist.Q4.type(input,"Another Chip"),yield test_dist.Q4.keyboard(keyboard_test_constants.G7);const allChipsList=canvas.getAllByRole("option");(0,test_dist.E3)(allChipsList).toHaveLength(2);const closeButton=(0,test_dist.ux)(allChipsList[0]).getByRole("button");yield test_dist.Q4.click(closeButton);const remainingChips=canvas.getAllByRole("option");(0,test_dist.E3)(remainingChips).toHaveLength(1),yield test_dist.Q4.type(input,"More Chip"),yield test_dist.Q4.keyboard(keyboard_test_constants.G7);const newRemainingChips=canvas.getAllByRole("option");(0,test_dist.E3)(newRemainingChips).toHaveLength(2),newRemainingChips[0].focus(),yield test_dist.Q4.tab(),yield test_dist.Q4.keyboard(keyboard_test_constants.G7),(0,test_dist.E3)(canvas.getAllByRole("option")).toHaveLength(1),yield test_dist.Q4.type(input,"Last Chip"),yield test_dist.Q4.keyboard(keyboard_test_constants.G7),(0,test_dist.E3)(canvas.getAllByRole("option")).toHaveLength(2),canvas.getAllByRole("option")[1].focus(),yield test_dist.Q4.tab(),yield test_dist.Q4.keyboard(keyboard_test_constants.u5),(0,test_dist.E3)(canvas.getAllByRole("option")).toHaveLength(1)}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const __namedExportsOrder=["Default","SingleSelect","MultiSelect","InputChip"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "chip-1",\n    label: "Label",\n    selected: false,\n    disabled: false,\n    compactSpacing: false\n  }\n}',...Default.parameters?.docs?.source}}},SingleSelect.parameters={...SingleSelect.parameters,docs:{...SingleSelect.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    type: "single"\n  },\n  render: args => {\n    const options = [{\n      id: "all",\n      label: "All"\n    }, {\n      id: "option-1",\n      label: "Option 1"\n    }, {\n      id: "option-2",\n      label: "Option 2"\n    }];\n    return {\n      props: {\n        ...args,\n        options,\n        selectedChip: null,\n        selectedLabel: "Aucune",\n        onChipClick(optionId: string) {\n          this["selectedChip"] = this["selectedChip"] === optionId ? null : optionId;\n          const found = options.find(option => option.id === this["selectedChip"]);\n          this["selectedLabel"] = found ? found.label : "Aucune";\n        }\n      },\n      template: `\n        <div style="display: flex; gap: 10px;" role="radiogroup">\n          <rte-chip\n            *ngFor="let option of options"\n            [id]="option.id"\n            [label]="option.label"\n            [selected]="selectedChip === option.id"\n            [type]="type"\n            [compactSpacing]="compactSpacing"\n            (click)="onChipClick(option.id)"\n            class="chip"\n          ></rte-chip>\n        </div>\n        <p style="font-family: Arial, sans-sérif">Chip sélectionnée: {{ selectedLabel }}</p>\n      `\n    };\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const chips = canvas.getAllByRole("radio");\n    await userEvent.click(chips[0]);\n    expect(chips[0]).toHaveAttribute("aria-checked", "true");\n    await userEvent.click(chips[1]);\n    expect(chips[1]).toHaveAttribute("aria-checked", "true");\n    expect(chips[0]).toHaveAttribute("aria-checked", "false");\n    await userEvent.click(chips[1]);\n    await userEvent.tab();\n    expect(chips[2]).toHaveFocus();\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    expect(chips[2]).toHaveAttribute("aria-checked", "true");\n    await userEvent.keyboard(TESTING_SPACE_KEY);\n    expect(chips[2]).toHaveAttribute("aria-checked", "false");\n  }\n}',...SingleSelect.parameters?.docs?.source}}},MultiSelect.parameters={...MultiSelect.parameters,docs:{...MultiSelect.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    type: "multi"\n  },\n  render: args => {\n    const options = [{\n      id: "option-1",\n      label: "Option 1"\n    }, {\n      id: "option-2",\n      label: "Option 2"\n    }, {\n      id: "option-3",\n      label: "Option 3"\n    }];\n    return {\n      props: {\n        ...args,\n        options,\n        selectedChips: new Set<string>(),\n        displayedChips: "",\n        onChipClick(optionId: string) {\n          if (this["selectedChips"].has(optionId)) {\n            this["selectedChips"].delete(optionId);\n          } else {\n            this["selectedChips"].add(optionId);\n          }\n          this["displayedChips"] = this["options"].filter((option: {\n            id: string;\n            label: string;\n          }) => this["selectedChips"].has(option.id)).map((option: {\n            id: string;\n            label: string;\n          }) => option.label).join(", ");\n        }\n      },\n      template: `\n        <div style="display: flex; gap: 10px;" role="group">\n          <rte-chip\n            *ngFor="let option of options"\n            [id]="option.id"\n            [label]="option.label"\n            [selected]="selectedChips.has(option.id)"\n            [type]="type"\n            [compactSpacing]="compactSpacing"\n            (click)="onChipClick(option.id)"\n            class="chip"\n          ></rte-chip>\n          </div>\n          <p style="font-family: Arial, sans-sérif">Chips sélectionnées: {{ displayedChips }}</p>\n      `\n    };\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const chips = canvas.getAllByRole("checkbox");\n    await userEvent.click(chips[0]);\n    expect(chips[0]).toHaveAttribute("aria-checked", "true");\n    await userEvent.click(chips[1]);\n    expect(chips[1]).toHaveAttribute("aria-checked", "true");\n    expect(chips[0]).toHaveAttribute("aria-checked", "true");\n    await userEvent.click(chips[1]);\n    expect(chips[1]).toHaveAttribute("aria-checked", "false");\n    await userEvent.tab();\n    expect(chips[2]).toHaveFocus();\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    expect(chips[2]).toHaveAttribute("aria-checked", "true");\n  }\n}',...MultiSelect.parameters?.docs?.source}}},InputChip.parameters={...InputChip.parameters,docs:{...InputChip.parameters?.docs,source:{originalSource:'{\n  decorators: [moduleMetadata({\n    imports: [ButtonComponent, TextInputComponent]\n  })],\n  args: {\n    ...Default.args,\n    type: "input"\n  },\n  render: args => {\n    return {\n      props: {\n        ...args,\n        inputValue: "",\n        chipsValues: [],\n        onChange(value: string) {\n          this["inputValue"] = value;\n        },\n        onClose(event: Event) {\n          const target = event.currentTarget as HTMLInputElement;\n          this["chipsValues"] = this["chipsValues"].filter((chip: string) => chip !== target.value);\n        },\n        handleAddChip() {\n          if (this["inputValue"].trim()) {\n            this["chipsValues"].push(this["inputValue"]);\n            this["inputValue"] = "";\n          }\n        },\n        handleKeyDown(event: KeyboardEvent) {\n          const input = event.target as HTMLInputElement;\n          if (event.key === ENTER_KEY && input.value.trim()) {\n            event.preventDefault();\n            this["handleAddChip"]();\n          }\n        }\n      },\n      template: `\n      <div style="display: flex; flex-direction: column; gap: 10px;">\n        <div style="display: flex; gap: 10px; align-items: end;">\n        <rte-text-input\n          id="input-add-chip"\n          label="Ajouter un chip"\n          [value]="inputValue"\n          (valueChange)="onChange($event)"\n          (keydown)="handleKeyDown($event)"\n        ></rte-text-input>\n          <rte-button label="Add Chip" (click)="handleAddChip()"></rte-button>\n        </div>\n        <div style="display: flex; gap: 10px;" role="listbox" aria-label="Chips List">\n          <rte-chip\n            *ngFor="let chip of chipsValues"\n            [id]="\'chip-\' + chip"\n            [label]="chip"\n            [type]="type"\n            (close)="onClose($event)"\n          >\n          </rte-chip>\n        </div>\n      </div>\n    `\n    };\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const input = canvas.getByRole("textbox");\n    await userEvent.type(input, "New Chip");\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    await userEvent.type(input, "Another Chip");\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    const allChipsList = canvas.getAllByRole("option");\n    expect(allChipsList).toHaveLength(2);\n    const closeButton = within(allChipsList[0]).getByRole("button");\n    await userEvent.click(closeButton);\n    const remainingChips = canvas.getAllByRole("option");\n    expect(remainingChips).toHaveLength(1);\n    await userEvent.type(input, "More Chip");\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    const newRemainingChips = canvas.getAllByRole("option");\n    expect(newRemainingChips).toHaveLength(2);\n    newRemainingChips[0].focus();\n    await userEvent.tab();\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    expect(canvas.getAllByRole("option")).toHaveLength(1);\n    await userEvent.type(input, "Last Chip");\n    await userEvent.keyboard(TESTING_ENTER_KEY);\n    expect(canvas.getAllByRole("option")).toHaveLength(2);\n    const lastChip = canvas.getAllByRole("option")[1];\n    lastChip.focus();\n    await userEvent.tab();\n    await userEvent.keyboard(TESTING_SPACE_KEY);\n    expect(canvas.getAllByRole("option")).toHaveLength(1);\n  }\n}',...InputChip.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/button/button.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.rte-button {\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  flex-shrink: 0;\n  justify-content: center;\n}\n.rte-button:focus-visible {\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n}\n.rte-button.size-s {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Nunito";\n  font-size: 14px;\n  letter-spacing: -0.5px;\n  font-weight: 600;\n  line-height: 20px;\n  height: 24px;\n  border-radius: 4px;\n  padding: 4px 8px;\n}\n.rte-button.size-s .rte-button-label {\n  margin: 0 4px;\n}\n.rte-button.size-m {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Nunito";\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n  letter-spacing: -0.5px;\n  height: 32px;\n  border-radius: 4px;\n  padding: 4px 12px;\n}\n.rte-button.size-m .rte-button-label {\n  margin: 0 6px;\n}\n.rte-button.size-l {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Nunito";\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 28px;\n  letter-spacing: -0.5px;\n  height: 40px;\n  border-radius: 8px;\n  padding: 4px 16px;\n}\n.rte-button.size-l .rte-button-label {\n  margin: 0 8px;\n}\n.rte-button.primary {\n  border: var(--border-brand-default);\n  color: var(--content-primary-inverse);\n  background: var(--background-brand-default);\n}\n.rte-button.primary:hover {\n  background: var(--background-brand-hover);\n  border: var(--background-brand-hover);\n}\n.rte-button.primary:active {\n  background: var(--background-brand-pressed);\n}\n.rte-button.primary:disabled {\n  background: var(--background-disabled);\n  border: solid 1px var(--border-disabled);\n  color: var(--content-disabled);\n  box-shadow: none;\n  cursor: default;\n}\n.rte-button.secondary {\n  background: var(--background-default);\n  border: solid 1px var(--border-brand-default);\n  color: var(--content-brand-default);\n}\n.rte-button.secondary:hover {\n  background: var(--background-brand-inverse-hover);\n}\n.rte-button.secondary:active {\n  background: var(--background-brand-inverse-pressed);\n}\n.rte-button.secondary:disabled {\n  background: var(--background-disabled);\n  border: solid 1px var(--border-disabled);\n  color: var(--content-disabled);\n  cursor: default;\n}\n.rte-button.text {\n  background: transparent;\n  border: none;\n  color: var(--content-brand-default);\n}\n.rte-button.text:hover {\n  background: var(--background-brand-inverse-hover);\n}\n.rte-button.text:active {\n  background: var(--background-brand-inverse-pressed);\n}\n.rte-button.text:disabled {\n  background: var(--background-disabled);\n  color: var(--content-disabled);\n  cursor: default;\n}\n.rte-button.transparent {\n  background: transparent;\n  border: none;\n  color: var(--content-brand-default);\n}\n.rte-button.transparent:hover {\n  color: var(--content-brand-hover);\n}\n.rte-button.transparent:active {\n  color: var(--content-brand-press);\n}\n.rte-button.transparent:disabled {\n  color: var(--content-disabled);\n  box-shadow: none;\n  cursor: default;\n}\n.rte-button.danger {\n  background: var(--background-danger-default);\n  border: none;\n  color: var(--content-primary-inverse);\n  border-radius: 8px;\n}\n.rte-button.danger:hover {\n  background: var(--background-danger-hover);\n}\n.rte-button.danger:active {\n  background: var(--background-danger-pressed);\n}\n.rte-button.danger:disabled {\n  background: var(--background-disabled);\n  border: var(--border-disabled);\n  color: var(--content-disabled);\n  box-shadow: none;\n  cursor: default;\n}\n.rte-button.neutral {\n  background: none;\n  border: none;\n  color: var(--content-primary);\n}\n.rte-button.neutral:hover {\n  color: var(--content-secondary);\n}\n.rte-button.neutral:active {\n  color: var(--content-tertiary);\n}\n.rte-button.neutral:disabled {\n  background: var(--background-disabled);\n  box-shadow: none;\n  color: var(--content-disabled);\n  cursor: default;\n}\n.rte-button.reverse {\n  background: none;\n  border: none;\n  color: var(--content-primary-inverse);\n}\n.rte-button.reverse:hover {\n  color: var(--background-hover);\n}\n.rte-button.reverse:active {\n  color: var(--content-primary-inverse);\n}\n.rte-button.reverse:disabled {\n  background: var(--background-disabled);\n  box-shadow: none;\n  color: var(--content-disabled);\n  cursor: default;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/chip/chip.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.chip {\n  overflow: hidden;\n  color: var(--content-brand-default);\n  text-overflow: ellipsis;\n  display: inline-flex;\n  padding: 4px 12px;\n  justify-content: center;\n  align-items: center;\n  gap: 0px;\n  border-radius: 999px;\n  background: var(--background-brand-unselected-default);\n  transition: background-color 200ms ease-in-out, color 200ms ease-in-out;\n}\n.chip:hover {\n  cursor: pointer;\n  color: var(--content-brand-hover);\n  background: var(--background-brand-unselected-hover);\n}\n.chip:focus-visible {\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n}\n.chip[data-disabled=true] {\n  cursor: default;\n  color: var(--content-disabled);\n  background: var(--background-disabled);\n  outline: none;\n}\n.chip[data-selected=true] {\n  color: var(--content-primary-inverse);\n  background: var(--background-brand-selected-default);\n}\n.chip[data-selected=true]:hover {\n  background: var(--background-brand-selected-hover);\n}\n.chip[data-selected=true][data-disabled=true] {\n  cursor: default;\n  color: var(--content-disabled);\n  background: var(--background-disabled);\n}\n.chip[data-compact-spacing=true] {\n  padding: 0px 12px;\n}\n.chip[data-type=input] {\n  padding: 0px 4px;\n  pointer-events: none;\n}\n\n.chip-label {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Nunito";\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n  letter-spacing: -0.5px;\n  padding: 0px 6px;\n}\n.chip-label[data-type=input] {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  padding: 0px 8px;\n}\n\n.chip-icon-container {\n  position: relative;\n  width: 16px;\n  height: 16px;\n}\n\n.chip-icon {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0;\n  transition: opacity 200ms ease-in-out, transform 200ms ease-in-out;\n  pointer-events: none;\n}\n\n.chip-icon--visible {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n.chip-close-button {\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 0px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  color: var(--content-brand-default);\n  border-radius: 999px;\n  width: 16px;\n  height: 16px;\n  pointer-events: auto;\n  transition: background-color 200ms ease-in-out;\n}\n.chip-close-button:disabled {\n  cursor: default;\n  color: var(--content-disabled);\n  background: var(--background-disabled);\n  outline: none;\n}\n.chip-close-button:hover:not(:disabled) {\n  background: var(--background-brand-hover);\n  color: var(--background-brand-unselected-hover);\n}\n.chip-close-button:focus-visible {\n  outline: 1px solid var(--border-brand-focused);\n}\n.chip-close-button--icon {\n  width: 16px;\n  height: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"../core/constants/keyboard/keyboard-test.constants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{G7:()=>TESTING_ENTER_KEY,ZX:()=>TESTING_ARROW_LEFT_KEY,s1:()=>TESTING_ARROW_RIGHT_KEY,u5:()=>TESTING_SPACE_KEY});var _keyboard_constants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../core/constants/keyboard/keyboard.constants.ts");const TESTING_SPACE_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.zP}}`,TESTING_ENTER_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.jD}}`,TESTING_ARROW_RIGHT_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.Zh}}`,TESTING_ARROW_LEFT_KEY=`{${_keyboard_constants__WEBPACK_IMPORTED_MODULE_0__.ST}}`},"./projects/ds-rte-lib/src/lib/components/button/button.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Q:()=>ButtonComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var button_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/button/button.component.scss?ngResource"),button_componentngResource_default=__webpack_require__.n(button_componentngResource),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs");let ButtonComponent=class ButtonComponent{constructor(){this.label=(0,core.input)(""),this.variant=(0,core.input)("primary"),this.size=(0,core.input)("m"),this.disabled=(0,core.input)(!1),this.icon=(0,core.input)(""),this.ariaLabel=(0,core.input)(""),this.ariaLabelledBy=(0,core.input)(""),this.buttonType=(0,core.input)("button"),this.click=(0,core.output)()}onClick(event){event.stopPropagation(),this.click.emit()}static{this.propDecorators={label:[{type:core.Input,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}],variant:[{type:core.Input,args:[{isSignal:!0,alias:"variant",required:!1,transform:void 0}]}],size:[{type:core.Input,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}],disabled:[{type:core.Input,args:[{isSignal:!0,alias:"disabled",required:!1,transform:void 0}]}],icon:[{type:core.Input,args:[{isSignal:!0,alias:"icon",required:!1,transform:void 0}]}],ariaLabel:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabel",required:!1,transform:void 0}]}],ariaLabelledBy:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabelledBy",required:!1,transform:void 0}]}],buttonType:[{type:core.Input,args:[{isSignal:!0,alias:"buttonType",required:!1,transform:void 0}]}],click:[{type:core.Output,args:["click"]}]}}};ButtonComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-button",imports:[],standalone:!0,template:'<button\n    class="rte-button {{ variant() }} size-{{ size() }}"\n    [attr.aria-label]="ariaLabel()"\n    [attr.aria-labelledby]="ariaLabelledBy()"\n    [attr.type]="buttonType()"\n    [disabled]="disabled()"\n    (click)="onClick($event)"\n>\n    <span class="rte-button-label">{{ label() }}</span>\n</button>',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[button_componentngResource_default()]})],ButtonComponent)}}]);
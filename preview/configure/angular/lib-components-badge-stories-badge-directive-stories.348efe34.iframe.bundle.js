(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[49517],{"./projects/ds-rte-lib/src/lib/components/badge/stories/badge.directive.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BadgeDisplay:()=>BadgeDisplay,BadgeType:()=>BadgeType,BadgeVisibility:()=>BadgeVisibility,CountLimit:()=>CountLimit,Default:()=>Default,IconBadge:()=>IconBadge,Icons:()=>Icons,KeyboardInteraction:()=>KeyboardInteraction,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>badge_directive_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),icon_map=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs");var badge_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/badge/badge.component.scss?ngResource"),badge_componentngResource_default=__webpack_require__.n(badge_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs");const badgeIconSize={xs:null,s:null,m:12,l:20};function getShowIcon({size,appearance,iconSize}){return!["xs","s"].includes(size)&&"icon"===appearance&&!!iconSize}function getShowText({size,appearance,count}){return!["xs","s"].includes(size)&&"text"===appearance&&"number"==typeof count&&count>0}var icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts");let BadgeComponent=class BadgeComponent{constructor(){this.badgeType=(0,core.input)("brand"),this.badgeSize=(0,core.input)("m"),this.badgeAppearance=(0,core.input)("text"),this.count=(0,core.input)(),this.icon=(0,core.input)("notification"),this.isValidIconName=(0,core.computed)(()=>(0,icon_map.vW)(this.icon())),this.showIcon=(0,core.computed)(()=>getShowIcon({size:this.badgeSize(),appearance:this.badgeAppearance(),iconSize:this.iconSize()})),this.showText=(0,core.computed)(()=>getShowText({size:this.badgeSize(),appearance:this.badgeAppearance(),count:this.count()})),this.displayCount=(0,core.computed)(()=>function getDisplayCount(count){return"number"!=typeof count?"":count<100?count.toString():"99+"}(this.count())),this.countOverflow=(0,core.computed)(()=>this.showText()&&this.displayCount().length>2),this.iconSize=(0,core.computed)(()=>function getBadgeIconSize(size){return badgeIconSize[size]??void 0}(this.badgeSize())),this.showBadge=(0,core.computed)(()=>function getShowBadge({size,appearance,count,iconSize}){switch(appearance){case"icon":return getShowIcon({size,appearance,iconSize});case"text":return getShowText({size,appearance,count});default:return!0}}({size:this.badgeSize(),appearance:this.badgeAppearance(),count:this.count(),iconSize:this.iconSize()}))}static{this.propDecorators={badgeType:[{type:core.Input,args:[{isSignal:!0,alias:"badgeType",required:!1,transform:void 0}]}],badgeSize:[{type:core.Input,args:[{isSignal:!0,alias:"badgeSize",required:!1,transform:void 0}]}],badgeAppearance:[{type:core.Input,args:[{isSignal:!0,alias:"badgeAppearance",required:!1,transform:void 0}]}],count:[{type:core.Input,args:[{isSignal:!0,alias:"count",required:!1,transform:void 0}]}],icon:[{type:core.Input,args:[{isSignal:!0,alias:"icon",required:!1,transform:void 0}]}]}}};BadgeComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-badge",imports:[common.CommonModule,icon_component.R],standalone:!0,template:'<div\n    class="badge size-{{ badgeSize() }} type-{{ badgeType() }}"\n    data-testid="badge"\n    [ngClass]="{\'hidden\': !showBadge(), \'count-overflow\': countOverflow()}"\n>\n    <rte-icon\n        *ngIf="showIcon()"\n        class="badge-icon"\n        [name]="icon()"\n        [size]="iconSize()!"\n    />\n    <p *ngIf="showText()" class="badge-text">\n        {{displayCount()}}\n    </p>\n</div>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[badge_componentngResource_default()]})],BadgeComponent);let BadgeDirective=class BadgeDirective{constructor(){this.rteBadgeType=(0,core.input)("brand"),this.rteBadgeSize=(0,core.input)("m"),this.rteBadgeAppearance=(0,core.input)("text"),this.rteBadgeCount=(0,core.input)(),this.rteBadgeIcon=(0,core.input)("settings"),this.badgeComponentRef=null,this.viewContainer=(0,core.inject)(core.ViewContainerRef),this.elementRef=(0,core.inject)(core.ElementRef),this.renderer=(0,core.inject)(core.Renderer2),this.hostElement=this.elementRef.nativeElement}ngOnInit(){this.badgeComponentRef=this.viewContainer.createComponent(BadgeComponent),this.assignDirectiveToComponent(),this.appendComponentToHost(),this.renderer.setStyle(this.hostElement,"position","relative")}ngOnChanges(){this.assignDirectiveToComponent()}ngOnDestroy(){this.badgeComponentRef&&this.badgeComponentRef.destroy()}assignDirectiveToComponent(){this.badgeComponentRef&&(this.badgeComponentRef.setInput("badgeType",this.rteBadgeType()),this.badgeComponentRef.setInput("badgeSize",this.rteBadgeSize()),this.badgeComponentRef.setInput("badgeAppearance",this.rteBadgeAppearance()),this.badgeComponentRef.setInput("count",this.rteBadgeCount()),this.badgeComponentRef.setInput("icon",this.rteBadgeIcon()))}appendComponentToHost(){this.badgeComponentRef&&this.renderer.appendChild(this.elementRef.nativeElement,this.badgeComponentRef.location.nativeElement)}static{this.ctorParameters=()=>[]}static{this.propDecorators={rteBadgeType:[{type:core.Input,args:[{isSignal:!0,alias:"rteBadgeType",required:!1,transform:void 0}]}],rteBadgeSize:[{type:core.Input,args:[{isSignal:!0,alias:"rteBadgeSize",required:!1,transform:void 0}]}],rteBadgeAppearance:[{type:core.Input,args:[{isSignal:!0,alias:"rteBadgeAppearance",required:!1,transform:void 0}]}],rteBadgeCount:[{type:core.Input,args:[{isSignal:!0,alias:"rteBadgeCount",required:!1,transform:void 0}]}],rteBadgeIcon:[{type:core.Input,args:[{isSignal:!0,alias:"rteBadgeIcon",required:!1,transform:void 0}]}]}}};BadgeDirective=(0,tslib_es6.Cg)([(0,core.Directive)({selector:"[rteBadge]",standalone:!0})],BadgeDirective);const RegularIconIds=Object.keys(icon_map.pL),TogglableIconIds=Object.keys(icon_map.kb),meta={title:"Composants/Badge/Badge",component:BadgeDirective,tags:["autodocs"],argTypes:{rteBadgeType:{control:"select",options:["brand","neutral","indicator"],defaultValue:"brand"},rteBadgeSize:{control:"select",options:["xs","s","m","l"],defaultValue:"m"},rteBadgeAppearance:{control:"select",options:["text","icon","empty"],defaultValue:"text"},rteBadgeCount:{control:"number",type:"number"},rteBadgeIcon:{control:"select",options:[...RegularIconIds,...TogglableIconIds].sort((a,b)=>a.localeCompare(b)),defaultValue:"notification"}},parameters:{layout:"centered"}},mockHost=badgeDirectives=>`\n<span\n    data-testid="badge-host"\n    style="\n      display: inline-flex;\n      width: 48px;\n      height: 48px;\n      background: orange;\n      border-radius: 12px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n      align-items: center;\n      justify-content: center;\n      color: #000;\n      font-weight: bold;\n      font-size: 16px;\n      position: relative;\n    "\n    rteBadge\n    ${badgeDirectives}\n>\n</span>\n`,badge_directive_stories=meta,Default={args:{rteBadgeType:"brand",rteBadgeSize:"m",rteBadgeCount:1,rteBadgeAppearance:"text",rteBadgeIcon:"notification"},render:args=>({props:args,declarations:[BadgeDirective],template:mockHost('\n            [rteBadgeType]="rteBadgeType"\n            [rteBadgeSize]="rteBadgeSize"\n            [rteBadgeAppearance]="rteBadgeAppearance"\n            [rteBadgeCount]="rteBadgeCount"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')})},IconBadge={args:{rteBadgeType:"brand",rteBadgeSize:"m",rteBadgeAppearance:"icon",rteBadgeIcon:"notification"},render:args=>({props:args,declarations:[BadgeDirective],template:mockHost('\n      [rteBadgeType]="rteBadgeType"\n      [rteBadgeSize]="rteBadgeSize"\n      [rteBadgeAppearance]="rteBadgeAppearance"\n      [rteBadgeIcon]="rteBadgeIcon"\n    ')})},BadgeDisplay={args:{rteBadgeIcon:"notification",rteBadgeCount:1},render:args=>({props:args,declarations:[BadgeDirective],template:`\n    <div style="display: flex; flex-direction: column; align-items: center; font-family: 'Nunito Sans', sans-serif;">\n      <h4>Appearance: Text</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-m-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n        ')}\n      </div>\n      <h4>Appearance: Icon</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"  \n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-m-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')}\n    </div>\n    <h4>Appearance: Empty</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeAppearance="empty"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"  \n            rteBadgeAppearance="empty"\n            data-testid="badge-empty-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeAppearance="empty"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeAppearance="empty"\n        ')}\n    </div>\n    `}),play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,dist.ux)(canvasElement),badgeTextS=canvas.getByTestId("badge-text-s-host").querySelector(".badge");(0,dist.E3)(badgeTextS).not.toBeVisible();const badgeIconS=canvas.getByTestId("badge-icon-s-host").querySelector(".badge");(0,dist.E3)(badgeIconS).not.toBeVisible();const badgeEmptyS=canvas.getByTestId("badge-empty-s-host").querySelector(".badge");(0,dist.E3)(badgeEmptyS).toBeVisible();const badgeTextM=canvas.getByTestId("badge-text-m-host").querySelector(".badge");(0,dist.E3)(badgeTextM).toBeVisible();const badgeIconM=canvas.getByTestId("badge-icon-m-host").querySelector(".badge");(0,dist.E3)(badgeIconM).toBeVisible()}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Sizes={args:{rteBadgeAppearance:"empty",rteBadgeCount:1},render:args=>({props:{...args},declarations:[BadgeDirective],template:`\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost('\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="xs"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="s"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="m"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="l"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n            </div>\n        `})},CountLimit={args:{rteBadgeType:"indicator",rteBadgeAppearance:"text",rteBadgeSize:"m"},render:args=>({props:{...args,count5:5,count99:99,count100:100},declarations:[BadgeDirective],template:`\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count5"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count99"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count100"\n                ')}\n            </div>\n        `})},Icons={args:{rteBadgeType:"brand",rteBadgeAppearance:"icon",rteBadgeSize:"m"},render:args=>({props:args,declarations:[BadgeDirective],template:`\n            <div style="display: flex; gap: 16px; align-items: center; flex-wrap: wrap;">\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="notification"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="home"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="user"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="search"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="heart"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="star"\n                ')}\n            </div>\n        `})},BadgeVisibility={args:{rteBadgeType:"brand",rteBadgeAppearance:"text",rteBadgeSize:"m",rteBadgeCount:1},render:args=>({props:args,declarations:[BadgeDirective],template:`\n          <div style="display: flex; flex-direction: column; gap: 8px;">\n            ${mockHost('\n                [rteBadgeType]="rteBadgeType"\n                [rteBadgeAppearance]="rteBadgeAppearance"\n                [rteBadgeSize]="rteBadgeSize"\n                [rteBadgeCount]="rteBadgeCount"\n            ')}\n            <hr>\n            <label>Badge Count</label>\n            <input\n              type="number"\n              [value]="rteBadgeCount"\n              (input)="rteBadgeCount = $event.target.valueAsNumber"\n              data-testid="badge-count-input"\n              aria-hidden="true"\n            />\n          </div>\n        `}),play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,dist.ux)(canvasElement),badgeCountInput=canvas.getByTestId("badge-count-input"),badge=canvas.getByTestId("badge");(0,dist.E3)(badge).toBeVisible(),yield dist.Q4.clear(badgeCountInput),yield dist.Q4.type(badgeCountInput,"0"),yield(0,dist.fm)(()=>(0,dist.E3)(badge).not.toBeVisible()),yield dist.Q4.type(badgeCountInput,"1"),yield(0,dist.fm)(()=>(0,dist.E3)(badge).toBeVisible())}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const KeyboardInteraction={args:Default.args,render:args=>({props:args,declarations:[BadgeDirective],template:`\n        <div style="display: flex; gap: 8px;">\n            ${mockHost('\n              [rteBadgeCount]="rteBadgeCount"\n            ')}\n        </div>\n        `}),play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const badge=(0,dist.ux)(canvasElement).getByTestId("badge");yield dist.Q4.tab(),(0,dist.E3)(badge).not.toHaveFocus()}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const BadgeType={args:{rteBadgeType:"brand",rteBadgeCount:1},render:args=>({props:args,declarations:[BadgeDirective],template:`\n      <div style="display: flex; gap: 24px; font-family: 'Nunito Sans', sans-serif;">\n        <div>\n          <h4>Brand</h4>\n          ${mockHost('\n            rteBadgeType="brand"\n            [rteBadgeCount]="rteBadgeCount"\n          ')}\n        </div>\n        <div>\n          <h4>Neutral</h4>\n          ${mockHost('\n            rteBadgeType="neutral"\n            [rteBadgeCount]="rteBadgeCount"\n          ')}\n        </div>\n        <div>\n          <h4>Indicator</h4>\n          ${mockHost('\n            rteBadgeType="indicator"\n            [rteBadgeCount]="rteBadgeCount"\n          ')} \n        </div>\n      </div>\n    `})},__namedExportsOrder=["Default","IconBadge","BadgeDisplay","Sizes","CountLimit","Icons","BadgeVisibility","KeyboardInteraction","BadgeType"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeSize: "m",\n    rteBadgeCount: 1,\n    rteBadgeAppearance: "text",\n    rteBadgeIcon: "notification"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: mockHost(`\n            [rteBadgeType]="rteBadgeType"\n            [rteBadgeSize]="rteBadgeSize"\n            [rteBadgeAppearance]="rteBadgeAppearance"\n            [rteBadgeCount]="rteBadgeCount"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)\n  })\n}',...Default.parameters?.docs?.source}}},IconBadge.parameters={...IconBadge.parameters,docs:{...IconBadge.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeSize: "m",\n    rteBadgeAppearance: "icon",\n    rteBadgeIcon: "notification"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: mockHost(`\n      [rteBadgeType]="rteBadgeType"\n      [rteBadgeSize]="rteBadgeSize"\n      [rteBadgeAppearance]="rteBadgeAppearance"\n      [rteBadgeIcon]="rteBadgeIcon"\n    `)\n  })\n}',...IconBadge.parameters?.docs?.source}}},BadgeDisplay.parameters={...BadgeDisplay.parameters,docs:{...BadgeDisplay.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeIcon: "notification",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n    <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Nunito Sans\', sans-serif;">\n      <h4>Appearance: Text</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-m-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeAppearance="text"\n            [rteBadgeCount]="rteBadgeCount"\n        `)}\n      </div>\n      <h4>Appearance: Icon</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"  \n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-m-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeAppearance="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)}\n    </div>\n    <h4>Appearance: Empty</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeAppearance="empty"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"  \n            rteBadgeAppearance="empty"\n            data-testid="badge-empty-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeAppearance="empty"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeAppearance="empty"\n        `)}\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badgeTextS = canvas.getByTestId("badge-text-s-host").querySelector(".badge");\n    expect(badgeTextS).not.toBeVisible();\n    const badgeIconS = canvas.getByTestId("badge-icon-s-host").querySelector(".badge");\n    expect(badgeIconS).not.toBeVisible();\n    const badgeEmptyS = canvas.getByTestId("badge-empty-s-host").querySelector(".badge");\n    expect(badgeEmptyS).toBeVisible();\n    const badgeTextM = canvas.getByTestId("badge-text-m-host").querySelector(".badge");\n    expect(badgeTextM).toBeVisible();\n    const badgeIconM = canvas.getByTestId("badge-icon-m-host").querySelector(".badge");\n    expect(badgeIconM).toBeVisible();\n  }\n}',...BadgeDisplay.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeAppearance: "empty",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost(`\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="xs"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="s"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="m"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    rteBadgeSize="l"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n            </div>\n        `\n  })\n}',...Sizes.parameters?.docs?.source}}},CountLimit.parameters={...CountLimit.parameters,docs:{...CountLimit.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "indicator",\n    rteBadgeAppearance: "text",\n    rteBadgeSize: "m"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      count5: 5,\n      count99: 99,\n      count100: 100\n    },\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count5"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count99"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count100"\n                `)}\n            </div>\n        `\n  })\n}',...CountLimit.parameters?.docs?.source}}},Icons.parameters={...Icons.parameters,docs:{...Icons.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeAppearance: "icon",\n    rteBadgeSize: "m"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center; flex-wrap: wrap;">\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="notification"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="home"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="user"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="search"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="heart"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeAppearance]="rteBadgeAppearance"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="star"\n                `)}\n            </div>\n        `\n  })\n}',...Icons.parameters?.docs?.source}}},BadgeVisibility.parameters={...BadgeVisibility.parameters,docs:{...BadgeVisibility.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeAppearance: "text",\n    rteBadgeSize: "m",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n          <div style="display: flex; flex-direction: column; gap: 8px;">\n            ${mockHost(`\n                [rteBadgeType]="rteBadgeType"\n                [rteBadgeAppearance]="rteBadgeAppearance"\n                [rteBadgeSize]="rteBadgeSize"\n                [rteBadgeCount]="rteBadgeCount"\n            `)}\n            <hr>\n            <label>Badge Count</label>\n            <input\n              type="number"\n              [value]="rteBadgeCount"\n              (input)="rteBadgeCount = $event.target.valueAsNumber"\n              data-testid="badge-count-input"\n              aria-hidden="true"\n            />\n          </div>\n        `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badgeCountInput = canvas.getByTestId("badge-count-input");\n    const badge = canvas.getByTestId("badge");\n    expect(badge).toBeVisible();\n    await userEvent.clear(badgeCountInput);\n    await userEvent.type(badgeCountInput, "0");\n    await waitFor(() => expect(badge).not.toBeVisible());\n    await userEvent.type(badgeCountInput, "1");\n    await waitFor(() => expect(badge).toBeVisible());\n  }\n}',...BadgeVisibility.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: Default.args,\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n        <div style="display: flex; gap: 8px;">\n            ${mockHost(`\n              [rteBadgeCount]="rteBadgeCount"\n            `)}\n        </div>\n        `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badge = canvas.getByTestId("badge");\n    await userEvent.tab();\n    expect(badge).not.toHaveFocus();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}},BadgeType.parameters={...BadgeType.parameters,docs:{...BadgeType.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n      <div style="display: flex; gap: 24px; font-family: \'Nunito Sans\', sans-serif;">\n        <div>\n          <h4>Brand</h4>\n          ${mockHost(`\n            rteBadgeType="brand"\n            [rteBadgeCount]="rteBadgeCount"\n          `)}\n        </div>\n        <div>\n          <h4>Neutral</h4>\n          ${mockHost(`\n            rteBadgeType="neutral"\n            [rteBadgeCount]="rteBadgeCount"\n          `)}\n        </div>\n        <div>\n          <h4>Indicator</h4>\n          ${mockHost(`\n            rteBadgeType="indicator"\n            [rteBadgeCount]="rteBadgeCount"\n          `)} \n        </div>\n      </div>\n    `\n  })\n}',...BadgeType.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/badge/badge.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.badge {\n  position: absolute;\n  border-radius: 999px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: opacity 0.15s ease-in-out;\n  box-sizing: border-box;\n}\n.badge.hidden {\n  opacity: 0;\n}\n.badge.type-brand {\n  box-shadow: 0px 2px 4px 0px var(--elevation-shadow-key-brand), 0px 0px 2px 0px var(--elevation-shadow-ambient-brand);\n  background: linear-gradient(0deg, var(--elevation-surface-shadow-2) 0%, var(--elevation-surface-shadow-2) 100%);\n  background-color: var(--background-brand-default);\n  color: var(--content-primary-inverse);\n}\n.badge.type-neutral {\n  box-shadow: 0px 2px 4px 0px var(--elevation-shadow-key), 0px 0px 2px 0px var(--elevation-shadow-ambient);\n  background: linear-gradient(0deg, var(--elevation-surface-shadow-2) 0%, var(--elevation-surface-shadow-2) 100%);\n  background-color: var(--background-neutral-regular-default);\n  color: var(--content-secondary);\n}\n.badge.type-indicator {\n  box-shadow: 0px 2px 4px 0px var(--elevation-shadow-key-brand), 0px 0px 2px 0px var(--elevation-shadow-ambient-brand);\n  background: linear-gradient(0deg, var(--elevation-surface-shadow-2) 0%, var(--elevation-surface-shadow-2) 100%);\n  background-color: var(--background-danger-default);\n  color: var(--content-primary-inverse);\n}\n.badge.size-xs {\n  width: 6px;\n  height: 6px;\n  box-shadow: none;\n  top: 0;\n  right: 0;\n}\n.badge.size-s {\n  width: 12px;\n  height: 12px;\n  top: -3px;\n  right: -3px;\n}\n.badge.size-m {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  min-width: 16px;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 16px;\n  top: -4px;\n  right: -4px;\n  padding: 0px 2px;\n}\n.badge.size-m.count-overflow {\n  padding: 0px 4px;\n}\n.badge.size-l {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n  letter-spacing: 0px;\n  min-width: 24px;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: 24px;\n  top: -8px;\n  right: -8px;\n  padding: 0px 4px;\n}\n.badge.size-l.count-overflow {\n  padding: 0px 6px;\n}\n.badge .badge-text {\n  margin: 0;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/icon/icon.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".rte-icon-container {\n  display: flex;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{pL:()=>RegularIcons,kb:()=>TogglableIcons,vW:()=>icon_map_isValidIconName});const RegularIcons={add:"add","alt-route":"alt_route",apps:"apps","arrow-alt-down":"arrow_alt_down","arrow-alt-down-left":"arrow_alt_down_left","arrow-alt-down-right":"arrow_alt_down_right","arrow-alt-left":"arrow_alt_left","arrow-alt-right":"arrow_alt_right","arrow-alt-up":"arrow_alt_up","arrow-alt-up-left":"arrow_alt_up_left","arrow-alt-up-right":"arrow_alt_up_right","arrow-angle-down-left":"arrow_angle_down_left","arrow-angle-down-right":"arrow_angle_down_right","arrow-angle-up-left":"arrow_angle_up_left","arrow-angle-up-right":"arrow_angle_up_right","arrow-chevron-down":"arrow_chevron_down","arrow-chevron-left":"arrow_chevron_left","arrow-chevron-right":"arrow_chevron_right","arrow-chevron-up":"arrow_chevron_up","arrow-double-down":"arrow_double_down","arrow-double-left":"arrow_double_left","arrow-double-right":"arrow_double_right","arrow-double-up":"arrow_double_up","arrow-down":"arrow_down","arrow-down-left":"arrow_down_left","arrow-down-right":"arrow_down_right","arrow-drop-down":"arrow_drop_down","arrow-drop-up":"arrow_drop_up","arrow-left":"arrow_left","arrow-right":"arrow_right","arrow-up":"arrow_up","arrow-up-left":"arrow_up_left","arrow-up-right":"arrow_up_right",asterisk:"asterisk","attach-file":"attach_file","battery-alt-empty":"battery_alt_empty","battery-alt-full":"battery_alt_full","battery-charging":"battery_charging","battery-empty":"battery_empty","battery-full":"battery_full",bluetooth:"bluetooth","bluetooth-off":"bluetooth_off","chart-bar":"chart_bar","chart-bar-stacked":"chart_bar_stacked",check:"check","check-indeterminate":"check_indeterminate","check-small":"check_small","checkbox-empty":"checkbox_empty",close:"close",compare:"compare","copy-all":"copy_all","crisis-alert":"crisis_alert",cut:"cut",download:"download","download-done":"download_done","drag-handle":"drag_handle","drag-indicator":"drag_indicator",exclamation:"exclamation","explore-travel":"explore_travel","external-link":"external_link",filter:"filter","filter-off":"filter_off","first-page":"first_page",forward:"forward",fullscreen:"fullscreen","fullscreen-exit":"fullscreen_exit",history:"history","hourglass-empty":"hourglass_empty","info-i":"info_i",language:"language","last-page":"last_page",link:"link","link-off":"link_off",list:"list","location-disabled":"location_disabled",login:"login",logout:"logout",menu:"menu","menu-open":"menu_open",monitoring:"monitoring","more-down":"more_down","more-horiz":"more_horiz","more-up":"more_up","more-vert":"more_vert",ohm:"ohm","open-in-full":"open_in_full",paste:"paste","play-pause":"play_pause","power-input":"power_input","power-plug":"power_plug","power-settings":"power_settings","priority-high":"priority_high",public:"public",publish:"publish","question-mark":"question_mark",radar:"radar","radio-button-empty":"radio_button_empty",redo:"redo",reload:"reload",remove:"remove",reply:"reply","reply-all":"reply_all",route:"route",search:"search","side-navigation":"side_navigation",sort:"sort","support-agent":"support_agent",timeline:"timeline","trending-down":"trending_down","trending-flat":"trending_flat","trending-up":"trending_up",tune:"tune",undo:"undo",upload:"upload",water:"water","water-alt":"water_alt",wifi:"wifi","wifi-off":"wifi_off",windmill:"windmill","zoom-in":"zoom_in","zoom-out":"zoom_out"},TogglableIcons={"add-circle":["add_circle_outlined","add_circle_filled"],"admin-panel-settings":["admin_panel_settings_outlined","admin_panel_settings_filled"],analytics:["analytics_outlined","analytics_filled"],archive:["archive_outlined","archive_filled"],"arrow-circle-chevron-down":["arrow_circle_chevron_down_outlined","arrow_circle_chevron_down_filled"],"arrow-circle-chevron-left":["arrow_circle_chevron_left_outlined","arrow_circle_chevron_left_filled"],"arrow-circle-chevron-right":["arrow_circle_chevron_right_outlined","arrow_circle_chevron_right_filled"],"arrow-circle-chevron-up":["arrow_circle_chevron_up_outlined","arrow_circle_chevron_up_filled"],"arrow-circle-down":["arrow_circle_down_outlined","arrow_circle_down_filled"],"arrow-circle-left":["arrow_circle_left_outlined","arrow_circle_left_filled"],"arrow-circle-right":["arrow_circle_right_outlined","arrow_circle_right_filled"],"arrow-circle-up":["arrow_circle_up_outlined","arrow_circle_up_filled"],article:["article_outlined","article_filled"],"assignment-complete":["assignment_complete_outlined","assignment_complete_filled"],assignment:["assignment_outlined","assignment_filled"],"battery-alert":["battery_alert_outlined","battery_alert_filled"],"battery-charging-full":["battery_charging_full_outlined","battery_charging_full_filled"],"bolt-alt-circle":["bolt_alt_circle_outlined","bolt_alt_circle_filled"],"bolt-alt":["bolt_alt_outlined","bolt_alt_filled"],"bolt-circle":["bolt_circle_outlined","bolt_circle_filled"],bolt:["bolt_outlined","bolt_filled"],bookmark:["bookmark_outlined","bookmark_filled"],bookmarks:["bookmarks_outlined","bookmarks_filled"],build:["build_outlined","build_filled"],"calendar-available":["calendar_available_outlined","calendar_available_filled"],"calendar-busy":["calendar_busy_outlined","calendar_busy_filled"],"calendar-month":["calendar_month_outlined","calendar_month_filled"],"calendar-today":["calendar_today_outlined","calendar_today_filled"],call:["call_outlined","call_filled"],cancel:["cancel_outlined","cancel_filled"],category:["category_outlined","category_filled"],"chart-add":["chart_add_outlined","chart_add_filled"],"chart-area":["chart_area_outlined","chart_area_filled"],"chart-pie":["chart_pie_outlined","chart_pie_filled"],"chart-table":["chart_table_outlined","chart_table_filled"],"chat-alt":["chat_alt_outlined","chat_alt_filled"],"chat-alt-unread":["chat_alt_unread_outlined","chat_alt_unread_filled"],chat:["chat_outlined","chat_filled"],"chat-unread":["chat_unread_outlined","chat_unread_filled"],"check-circle":["check_circle_outlined","check_circle_filled"],checkbox:["checkbox_outlined","checkbox_filled"],"checkbox-indeterminate":["checkbox_indeterminate_outlined","checkbox_indeterminate_filled"],clock:["clock_outlined","clock_filled"],"cloud-download":["cloud_download_outlined","cloud_download_filled"],cloud:["cloud_outlined","cloud_filled"],"cloud-off":["cloud_off_outlined","cloud_off_filled"],"cloud-upload":["cloud_upload_outlined","cloud_upload_filled"],"comment-add":["comment_add_outlined","comment_add_filled"],comment:["comment_outlined","comment_filled"],copy:["copy_outlined","copy_filled"],dangerous:["dangerous_outlined","dangerous_filled"],dashboard:["dashboard_outlined","dashboard_filled"],database:["database_outlined","database_filled"],delete:["delete_outlined","delete_filled"],desktop:["desktop_outlined","desktop_filled"],devices:["devices_outlined","devices_filled"],draft:["draft_outlined","draft_filled"],eco:["eco_outlined","eco_filled"],edit:["edit_outlined","edit_filled"],"electric-meter":["electric_meter_outlined","electric_meter_filled"],error:["error_outlined","error_filled"],explore:["explore_outlined","explore_filled"],"explore-off":["explore_off_outlined","explore_off_filled"],"fast-forward":["fast_forward_outlined","fast_forward_filled"],"fast-rewind":["fast_rewind_outlined","fast_rewind_filled"],feedback:["feedback_outlined","feedback_filled"],"file-copy":["file_copy_outlined","file_copy_filled"],"file-download":["file_download_outlined","file_download_filled"],"file-upload":["file_upload_outlined","file_upload_filled"],"filter-alt":["filter_alt_outlined","filter_alt_filled"],"filter-alt-off":["filter_alt_off_outlined","filter_alt_off_filled"],fire:["fire_outlined","fire_filled"],"fit-screen":["fit_screen_outlined","fit_screen_filled"],flag:["flag_outlined","flag_filled"],flash:["flash_outlined","flash_filled"],"flash-off":["flash_off_outlined","flash_off_filled"],"folder-add":["folder_add_outlined","folder_add_filled"],folder:["folder_outlined","folder_filled"],"folder-move":["folder_move_outlined","folder_move_filled"],"folder-open":["folder_open_outlined","folder_open_filled"],"folder-shared":["folder_shared_outlined","folder_shared_filled"],forum:["forum_outlined","forum_filled"],"group-add":["group_add_outlined","group_add_filled"],group:["group_outlined","group_filled"],groups:["groups_outlined","groups_filled"],headphones:["headphones_outlined","headphones_filled"],heart:["heart_outlined","heart_filled"],help:["help_outlined","help_filled"],home:["home_outlined","home_filled"],hourglass:["hourglass_outlined","hourglass_filled"],"image-broken":["image_broken_outlined","image_broken_filled"],image:["image_outlined","image_filled"],"image-gallery":["image_gallery_outlined","image_gallery_filled"],inbox:["inbox_outlined","inbox_filled"],info:["info_outlined","info_filled"],keep:["keep_outlined","keep_filled"],"keep-off":["keep_off_outlined","keep_off_filled"],label:["label_outlined","label_filled"],laptop:["laptop_outlined","laptop_filled"],"left-panel-close":["left_panel_close_outlined","left_panel_close_filled"],"left-panel-open":["left_panel_open_outlined","left_panel_open_filled"],"light-off":["light_off_outlined","light_off_filled"],"lightbulb-alt":["lightbulb_alt_outlined","lightbulb_alt_filled"],"lightbulb-circle":["lightbulb_circle_outlined","lightbulb_circle_filled"],lightbulb:["lightbulb_outlined","lightbulb_filled"],"list-alt":["list_alt_outlined","list_alt_filled"],"location-me":["location_me_outlined","location_me_filled"],"location-off":["location_off_outlined","location_off_filled"],"location-on":["location_on_outlined","location_on_filled"],lock:["lock_outlined","lock_filled"],"lock-open":["lock_open_outlined","lock_open_filled"],"lock-open-right":["lock_open_right_outlined","lock_open_right_filled"],mail:["mail_outlined","mail_filled"],"mail-unread":["mail_unread_outlined","mail_unread_filled"],map:["map_outlined","map_filled"],mic:["mic_outlined","mic_filled"],"mic-off":["mic_off_outlined","mic_off_filled"],"mode-dark":["mode_dark_outlined","mode_dark_filled"],"mode-light":["mode_light_outlined","mode_light_filled"],notification:["notification_outlined","notification_filled"],"notification-important":["notification_important_outlined","notification_important_filled"],"notification-off":["notification_off_outlined","notification_off_filled"],"notification-unread":["notification_unread_outlined","notification_unread_filled"],palette:["palette_outlined","palette_filled"],"pause-circle":["pause_circle_outlined","pause_circle_filled"],pause:["pause_outlined","pause_filled"],"photo-camera":["photo_camera_outlined","photo_camera_filled"],"play-circle":["play_circle_outlined","play_circle_filled"],play:["play_outlined","play_filled"],power:["power_outlined","power_filled"],"power-off":["power_off_outlined","power_off_filled"],"power-plug-connect":["power_plug_connect_outlined","power_plug_connect_filled"],"power-settings-circle":["power_settings_circle_outlined","power_settings_circle_filled"],"power-solar":["power_solar_outlined","power_solar_filled"],"power-switch":["power_switch_outlined","power_switch_filled"],"power-wind":["power_wind_outlined","power_wind_filled"],print:["print_outlined","print_filled"],"right-panel-close":["right_panel_close_outlined","right_panel_close_filled"],"right-panel-open":["right_panel_open_outlined","right_panel_open_filled"],save:["save_outlined","save_filled"],send:["send_outlined","send_filled"],settings:["settings_outlined","settings_filled"],share:["share_outlined","share_filled"],"skip-next":["skip_next_outlined","skip_next_filled"],"skip-previous":["skip_previous_outlined","skip_previous_filled"],smartphone:["smartphone_outlined","smartphone_filled"],star:["star_outlined","star_filled"],"sticky-note":["sticky_note_outlined","sticky_note_filled"],"stop-circle":["stop_circle_outlined","stop_circle_filled"],stop:["stop_outlined","stop_filled"],subtitles:["subtitles_outlined","subtitles_filled"],"text-snippet":["text_snippet_outlined","text_snippet_filled"],"trash-restore":["trash_restore_outlined","trash_restore_filled"],unarchive:["unarchive_outlined","unarchive_filled"],"user-add":["user_add_outlined","user_add_filled"],"user-circle":["user_circle_outlined","user_circle_filled"],user:["user_outlined","user_filled"],"user-settings":["user_settings_outlined","user_settings_filled"],verified:["verified_outlined","verified_filled"],"video-camera":["video_camera_outlined","video_camera_filled"],"video-camera-off":["video_camera_off_outlined","video_camera_off_filled"],"video-gallery":["video_gallery_outlined","video_gallery_filled"],"view-agenda":["view_agenda_outlined","view_agenda_filled"],"view-column":["view_column_outlined","view_column_filled"],"view-grid":["view_grid_outlined","view_grid_filled"],"view-kanban":["view_kanban_outlined","view_kanban_filled"],"view-module":["view_module_outlined","view_module_filled"],"view-timeline":["view_timeline_outlined","view_timeline_filled"],"visibility-hide":["visibility_hide_outlined","visibility_hide_filled"],"visibility-show":["visibility_show_outlined","visibility_show_filled"],"volume-down":["volume_down_outlined","volume_down_filled"],"volume-mute":["volume_mute_outlined","volume_mute_filled"],"volume-off":["volume_off_outlined","volume_off_filled"],"volume-up":["volume_up_outlined","volume_up_filled"],warning:["warning_outlined","warning_filled"],waterdrop:["waterdrop_outlined","waterdrop_filled"]};function icon_map_isValidIconName(iconName){return function isValidIconName(name,...iconSets){return iconSets.some(iconSet=>name in iconSet)}(iconName,RegularIcons,TogglableIcons)}},"./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>IconComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var icon_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.scss?ngResource"),icon_componentngResource_default=__webpack_require__.n(icon_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),rxjs_interop=__webpack_require__("../../node_modules/@angular/core/fesm2022/rxjs-interop.mjs"),platform_browser=__webpack_require__("../../node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs"),http=__webpack_require__("../../node_modules/@angular/common/fesm2022/http.mjs"),icon_map=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts");let IconService=class IconService{constructor(){this.http=(0,core.inject)(http.Qq)}getSvg(name,appearance){if(!this.http)throw new Error("HttpClient is not available");const togglableIcon=icon_map.kb[name];if(togglableIcon){const[outlinedIconName,filledIconName]=togglableIcon,iconName="filled"===appearance?filledIconName:outlinedIconName;return this.http.get(`assets/icons/${iconName}.svg`,{responseType:"text"})}{const iconName=icon_map.pL[name];if(!iconName)throw new Error(`Icon ${name} not found`);return this.http.get(`assets/icons/${iconName}.svg`,{responseType:"text"})}}};IconService=(0,tslib_es6.Cg)([(0,core.Injectable)()],IconService);let IconComponent=class IconComponent{constructor(){this.name=core.input.required(),this.size=(0,core.input)(20),this.color=(0,core.input)("currentColor"),this.classes=(0,core.input)(""),this.appearance=(0,core.input)(),this.destroyRef=(0,core.inject)(core.DestroyRef),this.svgContent=null,this.sanitizer=(0,core.inject)(platform_browser.DomSanitizer),this.iconService=(0,core.inject)(IconService),this.cdr=(0,core.inject)(core.ChangeDetectorRef),(0,core.effect)(()=>{this.setSvgContent(this.name())})}setSvgContent(svgName){this.iconService.getSvg(svgName,this.appearance()||"outlined").pipe((0,rxjs_interop.pQ)(this.destroyRef)).subscribe(res=>{const size=this.size(),svgWithSize=res.replace(/<svg([^>]*)>/,`<svg$1 width="${size}" height="${size}">`);this.svgContent=this.sanitizer.bypassSecurityTrustHtml(svgWithSize),this.cdr.markForCheck()})}static{this.ctorParameters=()=>[]}static{this.propDecorators={name:[{type:core.Input,args:[{isSignal:!0,alias:"name",required:!0,transform:void 0}]}],size:[{type:core.Input,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}],color:[{type:core.Input,args:[{isSignal:!0,alias:"color",required:!1,transform:void 0}]}],classes:[{type:core.Input,args:[{isSignal:!0,alias:"classes",required:!1,transform:void 0}]}],appearance:[{type:core.Input,args:[{isSignal:!0,alias:"appearance",required:!1,transform:void 0}]}]}}};IconComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-icon",imports:[common.CommonModule],standalone:!0,template:'<div class="rte-icon-container" [innerHTML]="svgContent" [style.height]="(size())+\'px\'" [style.width]="(size())+\'px\'"></div>',changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[IconService],styles:[icon_componentngResource_default()]})],IconComponent)}}]);
(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[7445],{"./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AssistiveText:()=>AssistiveText,CharacterCount:()=>CharacterCount,Default:()=>Default,Error:()=>Error,InteractionStates:()=>InteractionStates,KeyboardInteraction:()=>KeyboardInteraction,KeyboardRightIconClean:()=>KeyboardRightIconClean,KeyboardRightIconVisibility:()=>KeyboardRightIconVisibility,LabelPosition:()=>LabelPosition,LeftIcon:()=>LeftIcon,RequiredIndicator:()=>RequiredIndicator,RightIconClean:()=>RightIconClean,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>text_input_component_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),keyboard_constants=__webpack_require__("../core/constants/keyboard.constants.ts"),dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),icon_map=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var text_input_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.scss?ngResource"),text_input_componentngResource_default=__webpack_require__.n(text_input_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts"),icon_button_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon-button/icon-button.component.ts"),link_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/link/link.component.ts");let TextInputComponent=class TextInputComponent{constructor(){this.label=(0,core.input)(""),this.labelPosition=(0,core.input)("top"),this.required=(0,core.input)(!1),this.showCounter=(0,core.input)(!1),this.value=(0,core.input)(""),this.internalValue=(0,core.signal)(this.value()),this.leftIcon=(0,core.input)(null),this.showRightIcon=(0,core.input)(!0),this.rightIconAction=(0,core.input)("clean"),this.showLabelRequirement=(0,core.input)(!1),this.assistiveAppearance=(0,core.input)("description"),this.showAssistiveIcon=(0,core.input)(!1),this.assistiveTextLabel=(0,core.input)(""),this.error=(0,core.input)(!1),this.maxLength=(0,core.input)(150),this.disabled=(0,core.input)(!1),this.readOnly=(0,core.input)(!1),this.width=(0,core.input)("300px"),this.ariaLabel=(0,core.input)(""),this.ariaRequired=(0,core.input)(!1),this.ariaLabelledby=(0,core.input)(""),this.valueChange=(0,core.output)(),this.rightIconClick=(0,core.output)(),this.characterCount=(0,core.signal)(this.internalValue().length),this.isHiddenInput=(0,core.signal)(this.showRightIcon()&&"visibilityOn"===this.rightIconAction()),this.displayedLeftIcon=(0,core.computed)(()=>this.error()?"error":this.leftIcon()),this.displayCounter=(0,core.computed)(()=>this.showCounter()&&"number"==typeof this.maxLength()),this.rightIconName=(0,core.computed)(()=>["visibilityOn","visibilityOff"].includes(this.rightIconAction())?this.isHiddenInput()?"visibility-show":"visibility-hide":"clean"===this.rightIconAction()?"close":""),this.rightIconAriaLabel=(0,core.computed)(()=>["visibilityOn","visibilityOff"].includes(this.rightIconAction())?this.isHiddenInput()?"show text":"hide text":"clean"===this.rightIconAction()?"clear":""),this.shouldShowRightIcon=(0,core.computed)(()=>!this.readOnly()&&!this.disabled()&&("clean"===this.rightIconAction()?!!this.internalValue()?.length&&this.showRightIcon():this.showRightIcon()&&!!this.rightIconAction())),this.lastParentValue=this.value(),(0,core.effect)(()=>{const parentValue=this.value();parentValue!==this.lastParentValue&&(this.lastParentValue=parentValue,this.internalValue.set(parentValue))},{allowSignalWrites:!0})}handleChange(event){const input=event.target;this.internalValue.set(input.value),this.valueChange.emit(input.value),this.maxLength()&&this.characterCount.set(input.value.length),this.valueChange.emit(input.value)}onRightIconClickHandler(){this.rightIconClick.emit(),this.triggerRightIconAction()}toggleInputVisibility(){this.isHiddenInput.set(!this.isHiddenInput())}triggerRightIconAction(){"clean"===this.rightIconAction()&&(this.internalValue.set(""),this.valueChange.emit(""),this.characterCount.set(0)),["visibilityOn","visibilityOff"].includes(this.rightIconAction())&&this.toggleInputVisibility()}static{this.ctorParameters=()=>[]}static{this.propDecorators={label:[{type:core.Input,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}],labelPosition:[{type:core.Input,args:[{isSignal:!0,alias:"labelPosition",required:!1,transform:void 0}]}],required:[{type:core.Input,args:[{isSignal:!0,alias:"required",required:!1,transform:void 0}]}],showCounter:[{type:core.Input,args:[{isSignal:!0,alias:"showCounter",required:!1,transform:void 0}]}],value:[{type:core.Input,args:[{isSignal:!0,alias:"value",required:!1,transform:void 0}]}],leftIcon:[{type:core.Input,args:[{isSignal:!0,alias:"leftIcon",required:!1,transform:void 0}]}],showRightIcon:[{type:core.Input,args:[{isSignal:!0,alias:"showRightIcon",required:!1,transform:void 0}]}],rightIconAction:[{type:core.Input,args:[{isSignal:!0,alias:"rightIconAction",required:!1,transform:void 0}]}],showLabelRequirement:[{type:core.Input,args:[{isSignal:!0,alias:"showLabelRequirement",required:!1,transform:void 0}]}],assistiveAppearance:[{type:core.Input,args:[{isSignal:!0,alias:"assistiveAppearance",required:!1,transform:void 0}]}],showAssistiveIcon:[{type:core.Input,args:[{isSignal:!0,alias:"showAssistiveIcon",required:!1,transform:void 0}]}],assistiveTextLabel:[{type:core.Input,args:[{isSignal:!0,alias:"assistiveTextLabel",required:!1,transform:void 0}]}],error:[{type:core.Input,args:[{isSignal:!0,alias:"error",required:!1,transform:void 0}]}],maxLength:[{type:core.Input,args:[{isSignal:!0,alias:"maxLength",required:!1,transform:void 0}]}],disabled:[{type:core.Input,args:[{isSignal:!0,alias:"disabled",required:!1,transform:void 0}]}],readOnly:[{type:core.Input,args:[{isSignal:!0,alias:"readOnly",required:!1,transform:void 0}]}],width:[{type:core.Input,args:[{isSignal:!0,alias:"width",required:!1,transform:void 0}]}],ariaLabel:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabel",required:!1,transform:void 0}]}],ariaRequired:[{type:core.Input,args:[{isSignal:!0,alias:"ariaRequired",required:!1,transform:void 0}]}],ariaLabelledby:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabelledby",required:!1,transform:void 0}]}],valueChange:[{type:core.Output,args:["valueChange"]}],rightIconClick:[{type:core.Output,args:["rightIconClick"]}]}}};TextInputComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-text-input",imports:[common.CommonModule,icon_component.R,icon_button_component.x,link_component.g],standalone:!0,template:'<div\n  class="container {{labelPosition()}}"\n  [ngClass]="{\'error\': error()}"\n  [style.width]="width()"\n>\n  <ng-container *ngIf="label()">\n    <div class="text">\n      <div class="label-container">\n        <label class="input-label" id="inputLabel">\n          {{ label() }}\n        </label>\n        <ng-container *ngIf="required()">\n          <ng-container *ngIf="showLabelRequirement(); else requiredIcon">\n            <span class="required-text">(obligatoire)</span>\n          </ng-container>\n          <ng-template #requiredIcon>\n            <span class="required-icon-container">\n              <rte-icon name="asterisk" [size]="8" />\n            </span>\n          </ng-template>\n        </ng-container>\n        <ng-container *ngIf="!required() && showLabelRequirement()">\n          <span class="required-text">(optionnel)</span>\n        </ng-container>\n      </div>\n      <ng-container *ngIf="displayCounter() && labelPosition() === \'top\'">\n        <p class="input-counter" data-testid="input-counter">\n          {{ characterCount() }}/{{ maxLength() }}\n        </p>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <div class="input-container">\n    <div\n      class="input {{labelPosition()}}"\n      [ngClass]="{\'disabled\': disabled(), \'read-only\': readOnly()}"\n    >\n      <div class="input-bar" [ngClass]="{\'with-left-icon\': displayedLeftIcon(), \'with-right-icon\': rightIconAction()}">\n        <ng-container *ngIf="displayedLeftIcon()">\n          <rte-icon\n            appearance="outlined"\n            class="left-icon"\n            aria-hidden="true"\n            [name]="displayedLeftIcon()!"\n          />\n        </ng-container>\n\n        <input\n          #inputRef\n          class="input-field"\n          [ngClass]="{\'error\': error()}"\n          [attr.aria-label]="ariaLabel()"\n          [attr.aria-labelledby]="ariaLabelledby()"\n          [attr.aria-required]="ariaRequired()"\n          [type]="isHiddenInput() ? \'password\' : \'text\'"\n          [maxLength]="maxLength()"\n          [disabled]="disabled()"\n          [readOnly]="readOnly()"\n          [value]="internalValue()"\n          (input)="handleChange($event)"\n        />\n\n        <ng-container *ngIf="shouldShowRightIcon()">\n          <rte-icon-button\n            appearance="outlined"\n            variant="transparent"\n            class="right-icon"\n            data-testid="right-icon"\n            [name]="rightIconName() || \'close\'"\n            [ariaLabel]="rightIconAriaLabel()"\n            (click)="onRightIconClickHandler()"\n          />\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-container *ngIf="assistiveTextLabel()">\n      <div class="assistive-text">\n        <ng-container *ngIf="showAssistiveIcon() && assistiveAppearance() === \'error\'">\n          <rte-icon name="error" appearance="outlined" class="assistive-icon-error" [size]="12" />\n        </ng-container>\n        <ng-container *ngIf="showAssistiveIcon() && assistiveAppearance() === \'success\'">\n          <rte-icon name="check" appearance="outlined" class="assistive-icon-success" [size]="12" />\n        </ng-container>\n        <ng-container *ngIf="assistiveAppearance() === \'link\'; else assistiveLabel">\n          <rte-link [label]="assistiveTextLabel()" />\n        </ng-container>\n        <ng-template #assistiveLabel>\n          <p class="assistive-label" [ngClass]="assistiveAppearance()">\n            {{ assistiveTextLabel() }}\n          </p>\n        </ng-template>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf="displayCounter() && labelPosition() === \'side\'">\n    <p class="input-counter" data-testid="input-counter">\n      {{ characterCount() }}/{{ maxLength() }}\n    </p>\n  </ng-container>\n</div>',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[text_input_componentngResource_default()]})],TextInputComponent);const text_input_component_stories={title:"TextInput",component:TextInputComponent,tags:["autodocs"],argTypes:{value:{control:"text"},label:{control:"text",defaultValue:"Label"},labelPosition:{control:{type:"radio"},options:["top","side"],defaultValue:"top"},required:{control:"boolean",defaultValue:!1},showCounter:{control:"boolean",defaultValue:!1},maxLength:{control:"number",defaultValue:150},leftIcon:{control:"select",options:["",...Object.keys(icon_map.pL),...Object.keys(icon_map.kb)].sort((a,b)=>a.localeCompare(b)),description:"Nom de l’icône à afficher",defaultValue:"check"},rightIconAction:{control:{type:"select"},options:["","clean","visibilityOn","visibilityOff"],defaultValue:"clean"},showLabelRequirement:{control:"boolean",defaultValue:!1},assistiveAppearance:{control:{type:"select"},options:["description","error","success","link"],defaultValue:"description"},showAssistiveIcon:{control:"boolean"},assistiveTextLabel:{control:"text",defaultValue:""},disabled:{control:"boolean"},error:{control:"boolean"},readOnly:{control:"boolean"},valueChange:{action:"value changed"},rightIconClick:{action:"right icon clicked"}}},Default={args:{label:"Label",labelPosition:"top",required:!1,disabled:!1,showCounter:!1,showLabelRequirement:!1,assistiveAppearance:"description",showAssistiveIcon:!1,error:!1,readOnly:!1,maxLength:150,value:""}},CharacterCount={args:{...Default.args,maxLength:15,showCounter:!0},render:args=>({props:args,template:'\n      <div data-testid="input-container">\n        <rte-text-input\n          [label]="label"\n          [labelPosition]="labelPosition"\n          [required]="required"\n          [showCounter]="showCounter"\n          [maxLength]="maxLength"\n          [value]="value"\n          (valueChange)="valueChange($event)"\n        ></rte-text-input>\n      </div>\n    '}),play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement,args}){const canvas=(0,dist.ux)(canvasElement),textInput=canvas.getByTestId("input-container").querySelector("input"),counter=canvas.getByTestId("input-counter");yield dist.Q4.type(textInput,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vulputate libero et lorem iaculis ullamcorper. Duis dictum libero sed ultrices rutrum. Nullam hendrerit bibendum ornare. Donec consequat pellentesque lectus, quis gravida tortor luctus nec."),yield(0,dist.fm)(()=>(0,dist.E3)(textInput.value.length).toBe(args.maxLength)),yield(0,dist.fm)(()=>(0,dist.E3)(counter).toHaveTextContent(`${args.maxLength}/${args.maxLength}`))}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Error={args:{...Default.args,error:!0,assistiveAppearance:"error",showAssistiveIcon:!0,assistiveTextLabel:"Error message"}},InteractionStates={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Enabled\'" [value]="value"></rte-text-input>\n        <rte-text-input [label]="\'Disabled\'" [disabled]="true"></rte-text-input>\n        <rte-text-input [label]="\'Read only\'" [value]="\'Read only text\'" [readOnly]="true" data-testid="read-only"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveTextLabel]="\'Error message\'" [assistiveAppearance]="\'error\'" [error]="true"></rte-text-input>\n      </div>\n    '}),play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement}){const rightIcon=(0,dist.ux)(canvasElement).getByTestId("read-only").querySelector("rte-icon");(0,dist.E3)(rightIcon).not.toBeInTheDocument()}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const Sizes={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Default width (300px)</h3>\n          <rte-text-input [label]="\'Default\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>20px width (truncated to min-width 48px)</h3>\n          <rte-text-input [label]="\'20px\'" [width]="\'20px\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>100% width</h3>\n          <rte-text-input [label]="\'100%\'" [width]="\'100%\'"></rte-text-input>\n        </div>\n      </div>\n    '})},LabelPosition={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Top\'" [labelPosition]="\'top\'"></rte-text-input>\n        <rte-text-input [label]="\'Side\'" [labelPosition]="\'side\'"></rte-text-input>\n      </div>\n    '})},RequiredIndicator={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n      </div>\n    '})},AssistiveText={args:{...Default.args,assistiveTextLabel:"Assistive text"},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Description\'" [assistiveAppearance]="\'description\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveAppearance]="\'error\'" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success\'" [assistiveAppearance]="\'success\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Link\'" [assistiveAppearance]="\'link\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error + icon\'" [assistiveAppearance]="\'error\'" [showAssistiveIcon]="true" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success + icon\'" [assistiveAppearance]="\'success\'" [showAssistiveIcon]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n      </div>\n    '})},LeftIcon={args:{...Default.args,leftIcon:"search"},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Search icon\'" [leftIcon]="\'search\'"></rte-text-input>\n        <rte-text-input [label]="\'Search icon + error\'" [leftIcon]="\'search\'" [error]="true" data-testid="error"></rte-text-input>\n      </div>\n    '}),play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const leftIcon=(0,dist.ux)(canvasElement).getByTestId("error").querySelector("rte-icon");(0,dist.E3)(leftIcon).toBeVisible(),(0,dist.E3)(leftIcon).toHaveAttribute("ng-reflect-name","error")}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const RightIconClean={args:{...Default.args,rightIconAction:"clean",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref4=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,dist.ux)(canvasElement),textInput=canvas.getByTestId("input").querySelector("input");let rightIcon=canvas.queryByTestId("right-icon");(0,dist.E3)(rightIcon).not.toBeInTheDocument(),yield dist.Q4.type(textInput,"Hello"),rightIcon=canvas.getByTestId("right-icon"),yield dist.Q4.tab(),(0,dist.E3)(rightIcon).toBeInTheDocument(),yield dist.Q4.keyboard(keyboard_constants.zP),(0,dist.E3)(textInput).toHaveValue(""),(0,dist.E3)(rightIcon).not.toBeInTheDocument()}),function play(_x4){return _ref4.apply(this,arguments)})};var _ref4;const KeyboardInteraction={args:{...Default.args},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input"></rte-text-input>'}),play:(_ref5=(0,asyncToGenerator.A)(function*({canvasElement}){const textInput=(0,dist.ux)(canvasElement).getByTestId("input").querySelector("input");yield dist.Q4.tab(),(0,dist.E3)(textInput).toHaveFocus()}),function play(_x5){return _ref5.apply(this,arguments)})};var _ref5;const KeyboardRightIconClean={args:{...Default.args,rightIconAction:"clean",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref6=(0,asyncToGenerator.A)(function*({canvasElement}){const textInput=(0,dist.ux)(canvasElement).getByTestId("input").querySelector("input");yield dist.Q4.type(textInput,"Hello"),yield dist.Q4.tab(),yield dist.Q4.keyboard(keyboard_constants.zP),(0,dist.E3)(textInput).toHaveValue("")}),function play(_x6){return _ref6.apply(this,arguments)})};var _ref6;const KeyboardRightIconVisibility={args:{...Default.args,rightIconAction:"visibilityOff",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref7=(0,asyncToGenerator.A)(function*({canvasElement}){const textInput=(0,dist.ux)(canvasElement).getByTestId("input").querySelector("input");yield dist.Q4.type(textInput,"Hello"),yield dist.Q4.tab(),(0,dist.E3)(textInput).toHaveAttribute("type","text"),yield dist.Q4.keyboard(keyboard_constants.zP),(0,dist.E3)(textInput).toHaveAttribute("type","password"),yield dist.Q4.keyboard(keyboard_constants.zP),(0,dist.E3)(textInput).toHaveAttribute("type","text")}),function play(_x7){return _ref7.apply(this,arguments)})};var _ref7;const __namedExportsOrder=["Default","CharacterCount","Error","InteractionStates","Sizes","LabelPosition","RequiredIndicator","AssistiveText","LeftIcon","RightIconClean","KeyboardInteraction","KeyboardRightIconClean","KeyboardRightIconVisibility"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Label",\n    labelPosition: "top",\n    required: false,\n    disabled: false,\n    showCounter: false,\n    showLabelRequirement: false,\n    assistiveAppearance: "description",\n    showAssistiveIcon: false,\n    error: false,\n    readOnly: false,\n    maxLength: 150,\n    value: ""\n  }\n}',...Default.parameters?.docs?.source}}},CharacterCount.parameters={...CharacterCount.parameters,docs:{...CharacterCount.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    maxLength: 15,\n    showCounter: true\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div data-testid="input-container">\n        <rte-text-input\n          [label]="label"\n          [labelPosition]="labelPosition"\n          [required]="required"\n          [showCounter]="showCounter"\n          [maxLength]="maxLength"\n          [value]="value"\n          (valueChange)="valueChange($event)"\n        ></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    const inputContainer = canvas.getByTestId("input-container");\n    const textInput = inputContainer.querySelector("input");\n    const counter = canvas.getByTestId("input-counter");\n    await userEvent.type(textInput!, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vulputate libero et lorem iaculis ullamcorper. Duis dictum libero sed ultrices rutrum. Nullam hendrerit bibendum ornare. Donec consequat pellentesque lectus, quis gravida tortor luctus nec.");\n    await waitFor(() => expect(textInput!.value.length).toBe(args.maxLength));\n    await waitFor(() => expect(counter).toHaveTextContent(`${args.maxLength}/${args.maxLength}`));\n  }\n}',...CharacterCount.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    error: true,\n    assistiveAppearance: "error",\n    showAssistiveIcon: true,\n    assistiveTextLabel: "Error message"\n  }\n}',...Error.parameters?.docs?.source}}},InteractionStates.parameters={...InteractionStates.parameters,docs:{...InteractionStates.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Enabled\'" [value]="value"></rte-text-input>\n        <rte-text-input [label]="\'Disabled\'" [disabled]="true"></rte-text-input>\n        <rte-text-input [label]="\'Read only\'" [value]="\'Read only text\'" [readOnly]="true" data-testid="read-only"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveTextLabel]="\'Error message\'" [assistiveAppearance]="\'error\'" [error]="true"></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const readOnlyInput = canvas.getByTestId("read-only");\n    const rightIcon = readOnlyInput.querySelector("rte-icon");\n    expect(rightIcon).not.toBeInTheDocument();\n  }\n}',...InteractionStates.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Default width (300px)</h3>\n          <rte-text-input [label]="\'Default\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>20px width (truncated to min-width 48px)</h3>\n          <rte-text-input [label]="\'20px\'" [width]="\'20px\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>100% width</h3>\n          <rte-text-input [label]="\'100%\'" [width]="\'100%\'"></rte-text-input>\n        </div>\n      </div>\n    `\n  })\n}',...Sizes.parameters?.docs?.source}}},LabelPosition.parameters={...LabelPosition.parameters,docs:{...LabelPosition.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Top\'" [labelPosition]="\'top\'"></rte-text-input>\n        <rte-text-input [label]="\'Side\'" [labelPosition]="\'side\'"></rte-text-input>\n      </div>\n    `\n  })\n}',...LabelPosition.parameters?.docs?.source}}},RequiredIndicator.parameters={...RequiredIndicator.parameters,docs:{...RequiredIndicator.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n      </div>\n    `\n  })\n}',...RequiredIndicator.parameters?.docs?.source}}},AssistiveText.parameters={...AssistiveText.parameters,docs:{...AssistiveText.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    assistiveTextLabel: "Assistive text"\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Description\'" [assistiveAppearance]="\'description\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveAppearance]="\'error\'" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success\'" [assistiveAppearance]="\'success\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Link\'" [assistiveAppearance]="\'link\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error + icon\'" [assistiveAppearance]="\'error\'" [showAssistiveIcon]="true" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success + icon\'" [assistiveAppearance]="\'success\'" [showAssistiveIcon]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n      </div>\n    `\n  })\n}',...AssistiveText.parameters?.docs?.source}}},LeftIcon.parameters={...LeftIcon.parameters,docs:{...LeftIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    leftIcon: "search"\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Search icon\'" [leftIcon]="\'search\'"></rte-text-input>\n        <rte-text-input [label]="\'Search icon + error\'" [leftIcon]="\'search\'" [error]="true" data-testid="error"></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const errorInput = canvas.getByTestId("error");\n    const leftIcon = errorInput.querySelector("rte-icon");\n    expect(leftIcon).toBeVisible();\n    expect(leftIcon).toHaveAttribute("ng-reflect-name", "error");\n  }\n}',...LeftIcon.parameters?.docs?.source}}},RightIconClean.parameters={...RightIconClean.parameters,docs:{...RightIconClean.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "clean",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    let rightIcon = canvas.queryByTestId("right-icon");\n    expect(rightIcon).not.toBeInTheDocument();\n    await userEvent.type(textInput!, "Hello");\n    rightIcon = canvas.getByTestId("right-icon");\n    await userEvent.tab();\n    expect(rightIcon).toBeInTheDocument();\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveValue("");\n    expect(rightIcon).not.toBeInTheDocument();\n  }\n}',...RightIconClean.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.tab();\n    expect(textInput).toHaveFocus();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}},KeyboardRightIconClean.parameters={...KeyboardRightIconClean.parameters,docs:{...KeyboardRightIconClean.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "clean",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.type(textInput!, "Hello");\n    await userEvent.tab();\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveValue("");\n  }\n}',...KeyboardRightIconClean.parameters?.docs?.source}}},KeyboardRightIconVisibility.parameters={...KeyboardRightIconVisibility.parameters,docs:{...KeyboardRightIconVisibility.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "visibilityOff",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.type(textInput!, "Hello");\n    await userEvent.tab();\n    expect(textInput).toHaveAttribute("type", "text");\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveAttribute("type", "password");\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveAttribute("type", "text");\n  }\n}',...KeyboardRightIconVisibility.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/link/link.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.rte-link {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  justify-content: center;\n}\n.rte-link:visited {\n  color: var(--content-link-visited);\n  text-decoration: underline;\n}\n.rte-link:visited:hover {\n  color: var(--content-link-visited-hover);\n  text-decoration: none;\n}\n.rte-link:visited:active {\n  color: var(--content-link-visited-press);\n  text-decoration: underline;\n}\n.rte-link:visited:focus-visible {\n  color: var(--content-link-visited);\n  text-decoration: underline;\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n  border-radius: 4px;\n}\n.rte-link:not(:visited) {\n  color: var(--content-link-default);\n}\n.rte-link:not(:visited):hover {\n  color: var(--content-link-hover);\n  text-decoration: none;\n}\n.rte-link:not(:visited):active {\n  color: var(--content-link-press);\n  text-decoration: underline;\n}\n.rte-link:not(:visited):focus-visible {\n  color: var(--content-link-default);\n  text-decoration: underline;\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n  border-radius: 4px;\n}\n.rte-link.subtle:visited {\n  color: var(--content-primary);\n  text-decoration: none;\n}\n.rte-link.subtle:visited:hover {\n  color: var(--content-link-secondary);\n  text-decoration: underline;\n}\n.rte-link.subtle:visited:active {\n  color: var(--content-link-primary);\n  text-decoration: none;\n}\n.rte-link.subtle:visited:focus-visible {\n  color: var(--content-link-primary);\n  text-decoration: none;\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n  border-radius: 4px;\n}\n.rte-link.subtle:not(:visited) {\n  color: var(--content-primary);\n  text-decoration: none;\n}\n.rte-link.subtle:not(:visited):hover {\n  color: var(--content-secondary);\n  text-decoration: underline;\n}\n.rte-link.subtle:not(:visited):active {\n  color: var(--content-primary);\n  text-decoration: none;\n}\n.rte-link.subtle:not(:visited):focus-visible {\n  color: var(--content-primary);\n  text-decoration: none;\n  outline: 1px solid var(--border-brand-focused);\n  outline-offset: 4px;\n  border-radius: 4px;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.container {\n  display: flex;\n  width: 300px;\n  padding: 0px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 0px;\n}\n.container.side {\n  align-items: center;\n  flex-direction: row;\n}\n.container.side .text {\n  width: auto;\n  align-items: center;\n}\n.container.side .input-counter {\n  padding: 0 8px;\n}\n.container.error .input-container .input .input-bar .left-icon {\n  color: var(--content-danger);\n}\n.container .text {\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n  padding: 2px 8px;\n  box-sizing: border-box;\n}\n.container .text .label-container {\n  display: flex;\n  align-items: flex-start;\n}\n.container .text .label-container .input-label {\n  color: var(--content-secondary);\n  font-family: "Arial";\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 20px;\n  letter-spacing: 0px;\n}\n.container .text .label-container .required-text {\n  color: var(--content-tertiary);\n  align-self: center;\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  margin-block: 0px;\n  margin-inline: 4px;\n}\n.container .text .label-container .required-icon-container {\n  color: var(--content-danger);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-inline: 4px;\n}\n.container .input-container {\n  display: flex;\n  flex-direction: column;\n  height: 32px;\n  width: 100%;\n  min-width: 48px;\n  min-height: 32px;\n  max-height: 32px;\n  align-self: stretch;\n}\n.container .input-container .input .input-bar {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n.container .input-container .input .input-bar.with-left-icon .input-field {\n  padding-left: 32px;\n}\n.container .input-container .input .input-bar.with-right-icon .input-field {\n  padding-right: 32px;\n}\n.container .input-container .input .input-bar .left-icon {\n  position: absolute;\n  left: 8px;\n  color: var(--content-secondary);\n}\n.container .input-container .input .input-bar .right-icon {\n  position: absolute;\n  right: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: var(--content-secondary);\n}\n.container .input-container .input .input-bar .right-icon ::ng-deep .rte-icon-button {\n  color: var(--content-secondary);\n  height: 24px;\n  width: 24px;\n  padding: 0 2px;\n}\n.container .input-container .input .input-bar .right-icon ::ng-deep .rte-icon-button:focus {\n  outline: none;\n}\n.container .input-container .input .input-bar .right-icon ::ng-deep .rte-icon-button:focus-visible {\n  outline: 1px solid var(--border-brand-focused);\n  border-radius: 8px;\n}\n.container .input-container .input .input-bar .right-icon ::ng-deep .rte-icon-button:focus-visible::after {\n  display: none;\n}\n.container .input-container .input .input-bar .input-field {\n  box-sizing: border-box;\n  appearance: none;\n  width: 100%;\n  height: 32px;\n  min-width: 48px;\n  max-height: 32px;\n  border-radius: 4px;\n  border: 1px solid var(--border-secondary);\n  padding: 4px 16px;\n  background: linear-gradient(0deg, var(--elevation-surface-inner-shadow) 0%, var(--elevation-surface-inner-shadow) 100%), var(--background-default);\n  transition: border 200ms, outline 200ms;\n  color: var(--content-primary);\n  box-shadow: inset 0px 1px 4px 0px var(--elevation-shadow-key);\n}\n.container .input-container .input .input-bar .input-field:hover {\n  outline: 1px solid var(--border-primary);\n  border-color: var(--border-primary);\n}\n.container .input-container .input .input-bar .input-field:focus {\n  outline: 1px solid var(--border-brand-default);\n  border-color: var(--border-brand-default);\n}\n.container .input-container .input .input-bar .input-field:active {\n  outline: 1px solid var(--border-brand-default);\n  border-color: var(--border-brand-default);\n}\n.container .input-container .input .input-bar .input-field:disabled, .container .input-container .input .input-bar .input-field:read-only {\n  outline: 1px solid var(--border-brand-disabled);\n  border-color: var(--border-disabled);\n  background: linear-gradient(0deg, var(--elevation-surface-inner-shadow) 0%, var(--elevation-surface-inner-shadow) 100%), var(--background-disabled);\n  cursor: not-allowed;\n}\n.container .input-container .input .input-bar .input-field.error {\n  outline: 1px solid var(--border-danger);\n  border-color: var(--border-danger);\n}\n.container .input-container .assistive-text {\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  padding: 4px 8px;\n}\n.container .input-container .assistive-text .assistive-icon-error {\n  color: var(--content-danger);\n}\n.container .input-container .assistive-text .assistive-icon-success {\n  color: var(--content-success);\n}\n.container .input-container .assistive-text .assistive-label {\n  transition: color 200ms;\n}\n.container .input-container .assistive-text .assistive-label.error {\n  color: var(--content-danger);\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  margin: 0px;\n}\n.container .input-container .assistive-text .assistive-label.success {\n  color: var(--content-success);\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  margin: 0px;\n}\n.container .input-container .assistive-text .assistive-label.description {\n  color: var(--content-tertiary);\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  margin: 0px;\n}\n\n.input-counter {\n  color: var(--content-tertiary);\n  font-family: "Arial";\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 16px;\n  letter-spacing: 0px;\n  margin-block: 0px;\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ds-rte-lib/src/lib/components/link/link.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{g:()=>LinkComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var link_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/link/link.component.scss?ngResource"),link_componentngResource_default=__webpack_require__.n(link_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts");let LinkComponent=class LinkComponent{constructor(){this.label=(0,core.input)(""),this.href=(0,core.input)("#"),this.subtle=(0,core.input)(!1),this.externalLink=(0,core.input)(!1)}static{this.propDecorators={label:[{type:core.Input,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}],href:[{type:core.Input,args:[{isSignal:!0,alias:"href",required:!1,transform:void 0}]}],subtle:[{type:core.Input,args:[{isSignal:!0,alias:"subtle",required:!1,transform:void 0}]}],externalLink:[{type:core.Input,args:[{isSignal:!0,alias:"externalLink",required:!1,transform:void 0}]}]}}};LinkComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-link",imports:[common.CommonModule,icon_component.R],standalone:!0,template:'<a href="{{ href() }}" class="rte-link" role="link" [ngClass]="{\'subtle\': subtle()}">\n    <span class="rte-link-label">\n        {{ label() }}\n    </span>\n    <rte-icon *ngIf="externalLink()" name="external-link" [size]="12"></rte-icon>\n</a>',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[link_componentngResource_default()]})],LinkComponent)}}]);
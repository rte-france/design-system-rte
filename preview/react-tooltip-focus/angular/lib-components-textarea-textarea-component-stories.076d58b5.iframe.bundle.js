(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[3217],{"./projects/ds-rte-lib/src/lib/components/textarea/textarea.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CharacterCount:()=>CharacterCount,Default:()=>Default,Disabled:()=>Disabled,Error:()=>Error,KeyboardInteraction:()=>KeyboardInteraction,ReadOnly:()=>ReadOnly,__namedExportsOrder:()=>__namedExportsOrder,default:()=>textarea_component_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var textarea_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/textarea/textarea.component.scss?ngResource"),textarea_componentngResource_default=__webpack_require__.n(textarea_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),fesm2022_forms=__webpack_require__("../../node_modules/@angular/forms/fesm2022/forms.mjs");const TEXTAREA_REQUIREMENT_INDICATOR_VALUE_required="(obligatoire)",TEXTAREA_REQUIREMENT_INDICATOR_VALUE_requiredIcon="*",TEXTAREA_REQUIREMENT_INDICATOR_VALUE_optional="(facultatif)";var icon_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon.component.ts"),link_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/link/link.component.ts");let TextareaComponent=class TextareaComponent{constructor(){this.id=(0,core.input)(void 0),this.name=(0,core.input)(void 0),this.ariaLabelledby=(0,core.input)(void 0),this.label=(0,core.input)(void 0),this.labelId=(0,core.input)(void 0),this.labelPosition=(0,core.input)("top"),this.assistiveTextLabel=(0,core.input)(void 0),this.assistiveTextAppearance=(0,core.input)("description"),this.assistiveTextLink=(0,core.input)(void 0),this.required=(0,core.input)(!1),this.showLabelRequirement=(0,core.input)(!1),this.resizeable=(0,core.input)(!0),this.maxLength=(0,core.input)(void 0),this.disabled=(0,core.input)(!1),this.readOnly=(0,core.input)(!1),this.value=(0,core.input)(void 0),this.rows=(0,core.input)(3),this.defaultValue=(0,core.input)(void 0),this.showCounter=(0,core.input)(!1),this.assistiveTextIconSize=16,this.requirementIndicatorValue=(0,core.computed)(()=>this.required()?this.showLabelRequirement()?TEXTAREA_REQUIREMENT_INDICATOR_VALUE_required:TEXTAREA_REQUIREMENT_INDICATOR_VALUE_requiredIcon:TEXTAREA_REQUIREMENT_INDICATOR_VALUE_optional),this.change=(0,core.output)(),this.blur=(0,core.output)(),this.textareaRef=(0,core.viewChild)("textarea"),this.isAssistiveTextLinkVisible=(0,core.computed)(()=>"link"===this.assistiveTextAppearance()&&void 0!==this.assistiveTextLink()),this.characterCount=0,this.isCounterVisible=(0,core.computed)(()=>this.showCounter()&&this.maxLength())}onInput(event){const target=event.target;this.characterCount=target.value.length,this.change.emit(event)}onBlur(event){this.textareaRef()?.nativeElement?.scrollTo({top:0}),this.blur.emit(event)}static{this.propDecorators={id:[{type:core.Input,args:[{isSignal:!0,alias:"id",required:!1,transform:void 0}]}],name:[{type:core.Input,args:[{isSignal:!0,alias:"name",required:!1,transform:void 0}]}],ariaLabelledby:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabelledby",required:!1,transform:void 0}]}],label:[{type:core.Input,args:[{isSignal:!0,alias:"label",required:!1,transform:void 0}]}],labelId:[{type:core.Input,args:[{isSignal:!0,alias:"labelId",required:!1,transform:void 0}]}],labelPosition:[{type:core.Input,args:[{isSignal:!0,alias:"labelPosition",required:!1,transform:void 0}]}],assistiveTextLabel:[{type:core.Input,args:[{isSignal:!0,alias:"assistiveTextLabel",required:!1,transform:void 0}]}],assistiveTextAppearance:[{type:core.Input,args:[{isSignal:!0,alias:"assistiveTextAppearance",required:!1,transform:void 0}]}],assistiveTextLink:[{type:core.Input,args:[{isSignal:!0,alias:"assistiveTextLink",required:!1,transform:void 0}]}],required:[{type:core.Input,args:[{isSignal:!0,alias:"required",required:!1,transform:void 0}]}],showLabelRequirement:[{type:core.Input,args:[{isSignal:!0,alias:"showLabelRequirement",required:!1,transform:void 0}]}],resizeable:[{type:core.Input,args:[{isSignal:!0,alias:"resizeable",required:!1,transform:void 0}]}],maxLength:[{type:core.Input,args:[{isSignal:!0,alias:"maxLength",required:!1,transform:void 0}]}],disabled:[{type:core.Input,args:[{isSignal:!0,alias:"disabled",required:!1,transform:void 0}]}],readOnly:[{type:core.Input,args:[{isSignal:!0,alias:"readOnly",required:!1,transform:void 0}]}],value:[{type:core.Input,args:[{isSignal:!0,alias:"value",required:!1,transform:void 0}]}],rows:[{type:core.Input,args:[{isSignal:!0,alias:"rows",required:!1,transform:void 0}]}],defaultValue:[{type:core.Input,args:[{isSignal:!0,alias:"defaultValue",required:!1,transform:void 0}]}],showCounter:[{type:core.Input,args:[{isSignal:!0,alias:"showCounter",required:!1,transform:void 0}]}],change:[{type:core.Output,args:["change"]}],blur:[{type:core.Output,args:["blur"]}],textareaRef:[{type:core.ViewChild,args:["textarea",{isSignal:!0}]}]}}};TextareaComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-textarea",imports:[common.CommonModule,icon_component.R,link_component.g],standalone:!0,template:'<div class="container" [attr.data-label-position]="labelPosition()"> \n  <label *ngIf="label() && labelPosition() === \'side\'" [attr.data-label-position]="labelPosition()" [attr.id]="labelId()" [attr.for]="id()">{{label()}}<span *ngIf="required() || showLabelRequirement()" class="requirement-indicator" aria-hidden="true" [ngClass]="{\'required\': required(), \'show-label-requirement\': showLabelRequirement() }">{{requirementIndicatorValue()}}</span></label>\n  <div class="top-position-container" [attr.data-label-position]="labelPosition()">\n    <div class="header-container" [attr.data-label-position]="labelPosition()">\n      <label *ngIf="label() && labelPosition() === \'top\'" [attr.id]="labelId()" [attr.for]="id()">{{label()}}<span *ngIf="required() || showLabelRequirement()" class="requirement-indicator" aria-hidden="true" [ngClass]="{\'required\': required(), \'show-label-requirement\': showLabelRequirement() }">{{requirementIndicatorValue()}}</span></label>\n      <span *ngIf="isCounterVisible()" class="character-counter">{{ characterCount }}/{{ maxLength() }}</span>\n    </div>\n    <div class="textarea-container" [attr.data-label-position]="labelPosition()">\n      <textarea\n      #textarea\n      class="textarea {{ assistiveTextAppearance() }}"\n      [class.resizeable]="resizeable()"\n      [attr.id]="id()"\n      [attr.name]="name()"\n      [attr.aria-labelledby]="labelId() || ariaLabelledby()"\n      [attr.required]="required() || null"\n      [attr.maxLength]="maxLength() !== undefined ? maxLength() : null"\n      [attr.disabled]="disabled() || null"\n      [attr.readonly]="readOnly() || null"\n      [value]="value() !== undefined ? value() : null"\n      [defaultValue]="defaultValue() !== undefined ? defaultValue() : null"\n      [attr.rows]="rows()"\n      (input)="onInput($event)"\n      (blur)="onBlur($event)"\n      ></textarea>\n      <rte-link *ngIf="isAssistiveTextLinkVisible()" class="assistive-text-link" [externalLink]="true" [href]="assistiveTextLink() || \'\'" [label]="assistiveTextLabel() || \'\'">\n      </rte-link>\n      <div *ngIf="assistiveTextAppearance() !== \'link\'" class="assistive-text {{ assistiveTextAppearance() }}" [ngClass]="{\'disabled\' : disabled()}">\n        <rte-icon *ngIf="assistiveTextAppearance() === \'error\'" name="error" [size]="assistiveTextIconSize"></rte-icon>\n        <rte-icon *ngIf="assistiveTextAppearance() === \'success\'" name="check-circle" [size]="assistiveTextIconSize"></rte-icon>\n        <span>{{ assistiveTextLabel() }}</span>\n      </div>\n    </div>\n  </div>\n</div>\n',providers:[{provide:fesm2022_forms.kq,useExisting:TextareaComponent,multi:!0}],styles:[textarea_componentngResource_default()]})],TextareaComponent);const textarea_component_stories={title:"Textarea",component:TextareaComponent,tags:["autodocs"],argTypes:{value:{control:"text"},label:{control:"text"},labelPosition:{control:"select",options:["top","side"],description:"Position of the label relative to the textarea"},disabled:{control:"boolean"},rows:{control:"number"},change:{action:"changed"},assistiveTextAppearance:{control:"select",options:["description","error","success","link"],description:"Appearance of the assistive text"},assistiveTextLink:{control:"text",description:"Link for the assistive text when appearance is 'link'"},required:{control:"boolean",description:"Whether the textarea is required"},showLabelRequirement:{control:"boolean",description:"Whether to show the requirement indicator in the label"},maxLength:{control:"number",description:"Maximum number of characters allowed in the textarea"},showCounter:{control:"boolean",description:"Whether to display the character count"},readOnly:{control:"boolean",description:"Whether the textarea is read-only"}}},mockFn=(0,dist.fn)(),Default={args:{id:"my-textarea",label:"Label",labelId:"LabelId",labelPosition:"top",assistiveTextLabel:"Assistive text label",assistiveTextLink:"https://example.com",assistiveTextAppearance:"description",required:!1,value:"",rows:3,showLabelRequirement:!1,showCounter:!1,change:mockFn},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="'${args.label}'"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="args.change($event)"\n        />\n    </div>\n    `})},CharacterCount={args:{...Default.args,maxLength:10},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="${args.label}"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `}),play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement}){const textarea=(0,dist.ux)(canvasElement).getByRole("textbox");yield dist.Q4.type(textarea,"Hello World"),(0,dist.E3)(mockFn).toHaveBeenCalledTimes(10),(0,dist.E3)(textarea).toHaveValue("Hello Worl")}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Error={args:{...Default.args,maxLength:100,assistiveTextLabel:"Error message",assistiveTextAppearance:"error"},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="${args.label}"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `})},ReadOnly={args:{...Default.args,readOnly:!0,value:"This is a read-only textarea."},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="${args.label}"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `}),play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement,args}){const textarea=(0,dist.ux)(canvasElement).getByRole("textbox");yield dist.Q4.tab(),(0,dist.E3)(textarea).toHaveFocus(),yield dist.Q4.type(textarea,"Hello World"),(0,dist.E3)(mockFn).not.toHaveBeenCalled(),(0,dist.E3)(textarea).toHaveValue(args.value)}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const Disabled={args:{...Default.args,disabled:!0},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="${args.label}"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `}),play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const textarea=(0,dist.ux)(canvasElement).getByRole("textbox");yield dist.Q4.tab(),(0,dist.E3)(textarea).not.toHaveFocus()}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const KeyboardInteraction={args:{...Default.args},render:args=>({props:{...args},template:`\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="'${args.id}'"\n        [label]="${args.label}"\n        [labelId]="'${args.labelId}'"\n        [labelPosition]="'${args.labelPosition}'"\n        [assistiveTextLabel]="'${args.assistiveTextLabel}'"\n        [assistiveTextLink]="'${args.assistiveTextLink}'"\n        [assistiveTextAppearance]="'${args.assistiveTextAppearance}'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="'${args.value}'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `}),play:(_ref4=(0,asyncToGenerator.A)(function*({canvasElement}){const textarea=(0,dist.ux)(canvasElement).getByRole("textbox");yield dist.Q4.tab(),(0,dist.E3)(textarea).toHaveFocus(),textarea.blur()}),function play(_x4){return _ref4.apply(this,arguments)})};var _ref4;const __namedExportsOrder=["Default","CharacterCount","Error","ReadOnly","Disabled","KeyboardInteraction"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    id: "my-textarea",\n    label: "Label",\n    labelId: "LabelId",\n    labelPosition: "top",\n    assistiveTextLabel: "Assistive text label",\n    assistiveTextLink: "https://example.com",\n    assistiveTextAppearance: "description",\n    required: false,\n    value: "",\n    rows: 3,\n    showLabelRequirement: false,\n    showCounter: false,\n    change: mockFn\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="\'${args.label}\'"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="args.change($event)"\n        />\n    </div>\n    `\n  })\n}',...Default.parameters?.docs?.source}}},CharacterCount.parameters={...CharacterCount.parameters,docs:{...CharacterCount.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    maxLength: 10\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="${args.label}"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textarea = canvas.getByRole("textbox");\n    await userEvent.type(textarea, "Hello World");\n    expect(mockFn).toHaveBeenCalledTimes(10);\n    expect(textarea).toHaveValue("Hello Worl");\n  }\n}',...CharacterCount.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    maxLength: 100,\n    assistiveTextLabel: "Error message",\n    assistiveTextAppearance: "error"\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="${args.label}"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `\n  })\n}',...Error.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    readOnly: true,\n    value: "This is a read-only textarea."\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="${args.label}"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    const textarea = canvas.getByRole("textbox");\n    await userEvent.tab();\n    expect(textarea).toHaveFocus();\n    await userEvent.type(textarea, "Hello World");\n    expect(mockFn).not.toHaveBeenCalled();\n    expect(textarea).toHaveValue(args.value);\n  }\n}',...ReadOnly.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    disabled: true\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="${args.label}"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textarea = canvas.getByRole("textbox");\n    await userEvent.tab();\n    expect(textarea).not.toHaveFocus();\n  }\n}',...Disabled.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="width: 350px">\n      <rte-textarea\n        [id]="\'${args.id}\'"\n        [label]="${args.label}"\n        [labelId]="\'${args.labelId}\'"\n        [labelPosition]="\'${args.labelPosition}\'"\n        [assistiveTextLabel]="\'${args.assistiveTextLabel}\'"\n        [assistiveTextLink]="\'${args.assistiveTextLink}\'"\n        [assistiveTextAppearance]="\'${args.assistiveTextAppearance}\'"\n        [required]=${args.required}\n        [maxLength]=${args.maxLength}\n        [showCounter]=${args.showCounter}\n        [required]=${args.required}\n        [showLabelRequirement]=${args.showLabelRequirement}\n        [readOnly]=${args.readOnly}\n        [value]="\'${args.value}\'"\n        [rows]=${args.rows}\n        [disabled]=${args.disabled}\n        (change)="change($event)"\n        />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textarea = canvas.getByRole("textbox");\n    await userEvent.tab();\n    expect(textarea).toHaveFocus();\n    textarea.blur();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/textarea/textarea.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,'.container[data-label-position=side] {\n  display: flex;\n  flex-direction: row;\n}\n\n.top-position-container {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  display: flex;\n  height: 100%;\n  padding: 0px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 0px;\n  flex-shrink: 0;\n  border-radius: 0px;\n  opacity: 100%;\n}\n.top-position-container[data-label-position=side] {\n  flex-grow: 1;\n}\n.top-position-container .header-container {\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: space-between;\n  padding: 2px 8px;\n  box-sizing: border-box;\n  gap: 8px;\n}\n.top-position-container .header-container[data-label-position=side] {\n  padding: 0;\n  justify-content: flex-end;\n}\n.top-position-container .textarea-container {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n}\n.top-position-container .textarea-container .textarea {\n  box-shadow: inset 0px 1px 4px 0px var(--elevation-shadow-key);\n  background: linear-gradient(0deg, var(--elevation-surface-inner-shadow) 0%, var(--elevation-surface-inner-shadow) 100%);\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  color: var(--content-primary);\n  min-height: 70px;\n  padding: 8px 16px 8px 16px;\n  width: 100%;\n  min-width: 140px;\n  border-radius: 8px;\n  border: 1px solid var(--border-secondary);\n  opacity: 100%;\n  background-color: var(--background-default);\n  resize: none;\n  box-sizing: border-box;\n}\n@media (min-width: 1024px) {\n  .top-position-container .textarea-container .textarea {\n    min-height: 56px;\n    min-width: 112px;\n    max-width: 1100px;\n  }\n}\n.top-position-container .textarea-container .textarea:focus-visible, .top-position-container .textarea-container .textarea:active {\n  outline: none;\n}\n.top-position-container .textarea-container .textarea:focus-visible:not(:disabled), .top-position-container .textarea-container .textarea:active:not(:disabled) {\n  outline: 1px solid var(--border-brand-default);\n  border: 1px solid var(--border-brand-default);\n}\n.top-position-container .textarea-container .textarea.error:not(:disabled) {\n  outline: 1px solid var(--border-danger);\n  border: 1px solid var(--border-danger);\n}\n.top-position-container .textarea-container .textarea.resizeable {\n  resize: vertical;\n}\n.top-position-container .textarea-container .textarea:disabled, .top-position-container .textarea-container .textarea:read-only {\n  cursor: not-allowed;\n  background-color: var(--background-disabled);\n}\n.top-position-container .textarea-container .textarea:disabled {\n  resize: none;\n}\n.top-position-container .textarea-container .textarea:read-only {\n  color: var(--content-secondary);\n}\n.top-position-container .textarea-container .assistive-text-link {\n  padding: 4px 8px;\n}\n.top-position-container .textarea-container .assistive-text {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  display: flex;\n  padding: 4px 8px;\n  color: var(--content-tertiary);\n  gap: 4px;\n}\n.top-position-container .textarea-container .assistive-text.error:not(.disabled) {\n  color: var(--content-danger);\n}\n.top-position-container .textarea-container .assistive-text.success {\n  color: var(--content-success);\n}\n\n.character-counter {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  color: var(--content-tertiary);\n}\n\nlabel {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 14px;\n  line-height: 20px;\n  letter-spacing: 0px;\n  color: var(--content-secondary);\n  max-width: 300px;\n  justify-content: space-between;\n  white-space: normal;\n  overflow-wrap: normal;\n  word-break: normal;\n}\nlabel[data-label-position=side] {\n  padding: 24px 8px;\n  align-items: flex-start;\n  gap: 0px;\n  align-self: stretch;\n}\nlabel .requirement-indicator {\n  margin-left: 2px;\n}\nlabel .requirement-indicator.show-label-requirement {\n  font-feature-settings: "liga" off, "clig" off;\n  font-style: normal;\n  font-family: "Arial";\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0px;\n  color: var(--content-tertiary);\n}\nlabel .requirement-indicator.show-label-requirement:not(.required) {\n  font-style: italic;\n}\nlabel .requirement-indicator:not(.show-label-requirement).required {\n  color: var(--content-danger);\n}',""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);
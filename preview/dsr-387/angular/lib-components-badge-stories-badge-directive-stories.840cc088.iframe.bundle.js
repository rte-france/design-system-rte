"use strict";(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[49517],{"./projects/ds-rte-lib/src/lib/components/badge/stories/badge.directive.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BadgeDisplay:()=>BadgeDisplay,BadgeType:()=>BadgeType,BadgeVisibility:()=>BadgeVisibility,CountLimit:()=>CountLimit,Default:()=>Default,IconBadge:()=>IconBadge,Icons:()=>Icons,KeyboardInteraction:()=>KeyboardInteraction,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),_storybook_test__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),_icon_icon_map__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts"),_badge_directive__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./projects/ds-rte-lib/src/lib/components/badge/badge.directive.ts");const RegularIconIds=Object.keys(_icon_icon_map__WEBPACK_IMPORTED_MODULE_2__.pL),TogglableIconIds=Object.keys(_icon_icon_map__WEBPACK_IMPORTED_MODULE_2__.kb),meta={title:"Composants/Badge/Badge",component:_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F,tags:["autodocs"],argTypes:{rteBadgeType:{control:"select",options:["brand","neutral","indicator"],defaultValue:"brand"},rteBadgeSize:{control:"select",options:["xs","s","m","l"],defaultValue:"m"},rteBadgeContent:{control:"select",options:["number","icon","empty"],defaultValue:"number"},rteBadgeCount:{control:"number",type:"number"},rteBadgeIcon:{control:"select",options:[...RegularIconIds,...TogglableIconIds].sort((a,b)=>a.localeCompare(b)),defaultValue:"notification"}},parameters:{layout:"centered"}},mockHost=badgeDirectives=>`\n<span\n    data-testid="badge-host"\n    style="\n      display: inline-flex;\n      width: 48px;\n      height: 48px;\n      background: orange;\n      border-radius: 12px;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n      align-items: center;\n      justify-content: center;\n      color: #000;\n      font-weight: bold;\n      font-size: 16px;\n      position: relative;\n    "\n    rteBadge\n    ${badgeDirectives}\n>\n</span>\n`,__WEBPACK_DEFAULT_EXPORT__=meta,Default={args:{rteBadgeType:"brand",rteBadgeSize:"m",rteBadgeCount:1,rteBadgeContent:"number",rteBadgeIcon:"notification"},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:mockHost('\n            [rteBadgeType]="rteBadgeType"\n            [rteBadgeSize]="rteBadgeSize"\n            [rteBadgeContent]="rteBadgeContent"\n            [rteBadgeCount]="rteBadgeCount"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')})},IconBadge={args:{rteBadgeType:"brand",rteBadgeSize:"m",rteBadgeContent:"icon",rteBadgeIcon:"notification"},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:mockHost('\n      [rteBadgeType]="rteBadgeType"\n      [rteBadgeSize]="rteBadgeSize"\n      [rteBadgeContent]="rteBadgeContent"\n      [rteBadgeIcon]="rteBadgeIcon"\n    ')})},BadgeDisplay={args:{rteBadgeIcon:"notification",rteBadgeCount:1},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n    <div style="display: flex; flex-direction: column; align-items: center; font-family: 'Nunito Sans', sans-serif;">\n      <h4>Appearance: Text</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-m-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n        ')}\n      </div>\n      <h4>Appearance: Icon</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"  \n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-m-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        ')}\n    </div>\n    <h4>Appearance: Empty</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost('\n            rteBadgeSize="xs"\n            rteBadgeContent="empty"\n        ')}\n        ${mockHost('\n            rteBadgeSize="s"  \n            rteBadgeContent="empty"\n            data-testid="badge-empty-s-host"\n        ')}\n        ${mockHost('\n            rteBadgeSize="m"\n            rteBadgeContent="empty"\n        ')}\n        ${mockHost('\n            rteBadgeSize="l"\n            rteBadgeContent="empty"\n        ')}\n    </div>\n    `}),play:(_ref=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__.A)(function*({canvasElement}){const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.ux)(canvasElement),badgeTextS=canvas.getByTestId("badge-text-s-host").querySelector(".badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badgeTextS).not.toBeVisible();const badgeIconS=canvas.getByTestId("badge-icon-s-host").querySelector(".badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badgeIconS).not.toBeVisible();const badgeEmptyS=canvas.getByTestId("badge-empty-s-host").querySelector(".badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badgeEmptyS).toBeVisible();const badgeTextM=canvas.getByTestId("badge-text-m-host").querySelector(".badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badgeTextM).toBeVisible();const badgeIconM=canvas.getByTestId("badge-icon-m-host").querySelector(".badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badgeIconM).toBeVisible()}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Sizes={args:{rteBadgeContent:"empty",rteBadgeCount:1},render:args=>({props:{...args},declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost('\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="xs"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="s"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="m"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n                ${mockHost('\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="l"\n                    [rteBadgeCount]="rteBadgeCount"\n                ')}\n            </div>\n        `})},CountLimit={args:{rteBadgeType:"indicator",rteBadgeContent:"number",rteBadgeSize:"m"},render:args=>({props:{...args,count5:5,count99:99,count100:100},declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count5"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count99"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count100"\n                ')}\n            </div>\n        `})},Icons={args:{rteBadgeType:"brand",rteBadgeContent:"icon",rteBadgeSize:"m"},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n            <div style="display: flex; gap: 16px; align-items: center; flex-wrap: wrap;">\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="notification"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="home"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="user"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="search"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="heart"\n                ')}\n                ${mockHost('\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="star"\n                ')}\n            </div>\n        `})},BadgeVisibility={args:{rteBadgeType:"brand",rteBadgeContent:"number",rteBadgeSize:"m",rteBadgeCount:1},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n          <div style="display: flex; flex-direction: column; gap: 8px;">\n            ${mockHost('\n                [rteBadgeType]="rteBadgeType"\n                [rteBadgeContent]="rteBadgeContent"\n                [rteBadgeSize]="rteBadgeSize"\n                [rteBadgeCount]="rteBadgeCount"\n            ')}\n            <hr>\n            <label>Badge Count</label>\n            <input\n              type="number"\n              [value]="rteBadgeCount"\n              (input)="rteBadgeCount = $event.target.valueAsNumber"\n              data-testid="badge-count-input"\n              aria-hidden="true"\n            />\n          </div>\n        `}),play:(_ref2=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__.A)(function*({canvasElement}){const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.ux)(canvasElement),badgeCountInput=canvas.getByTestId("badge-count-input"),badge=canvas.getByTestId("badge");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badge).toBeVisible(),yield _storybook_test__WEBPACK_IMPORTED_MODULE_1__.Q4.clear(badgeCountInput),yield _storybook_test__WEBPACK_IMPORTED_MODULE_1__.Q4.type(badgeCountInput,"0"),yield(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fm)(()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badge).not.toBeVisible()),yield _storybook_test__WEBPACK_IMPORTED_MODULE_1__.Q4.type(badgeCountInput,"1"),yield(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.fm)(()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badge).toBeVisible())}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const KeyboardInteraction={args:Default.args,render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n        <div style="display: flex; gap: 8px;">\n            ${mockHost('\n              [rteBadgeCount]="rteBadgeCount"\n            ')}\n        </div>\n        `}),play:(_ref3=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__.A)(function*({canvasElement}){const badge=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.ux)(canvasElement).getByTestId("badge");yield _storybook_test__WEBPACK_IMPORTED_MODULE_1__.Q4.tab(),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_1__.E3)(badge).not.toHaveFocus()}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const BadgeType={args:{rteBadgeType:"brand",rteBadgeCount:1},render:args=>({props:args,declarations:[_badge_directive__WEBPACK_IMPORTED_MODULE_3__.F],template:`\n      <div style="display: flex; gap: 24px; font-family: 'Nunito Sans', sans-serif;">\n        <div>\n          <h4>Brand</h4>\n          ${mockHost('\n            rteBadgeType="brand"\n            [rteBadgeCount]="rteBadgeCount"\n          ')}\n        </div>\n        <div>\n          <h4>Neutral</h4>\n          ${mockHost('\n            rteBadgeType="neutral"\n            [rteBadgeCount]="rteBadgeCount"\n          ')}\n        </div>\n        <div>\n          <h4>Indicator</h4>\n          ${mockHost('\n            rteBadgeType="indicator"\n            [rteBadgeCount]="rteBadgeCount"\n          ')} \n        </div>\n      </div>\n    `})},__namedExportsOrder=["Default","IconBadge","BadgeDisplay","Sizes","CountLimit","Icons","BadgeVisibility","KeyboardInteraction","BadgeType"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeSize: "m",\n    rteBadgeCount: 1,\n    rteBadgeContent: "number",\n    rteBadgeIcon: "notification"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: mockHost(`\n            [rteBadgeType]="rteBadgeType"\n            [rteBadgeSize]="rteBadgeSize"\n            [rteBadgeContent]="rteBadgeContent"\n            [rteBadgeCount]="rteBadgeCount"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)\n  })\n}',...Default.parameters?.docs?.source}}},IconBadge.parameters={...IconBadge.parameters,docs:{...IconBadge.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeSize: "m",\n    rteBadgeContent: "icon",\n    rteBadgeIcon: "notification"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: mockHost(`\n      [rteBadgeType]="rteBadgeType"\n      [rteBadgeSize]="rteBadgeSize"\n      [rteBadgeContent]="rteBadgeContent"\n      [rteBadgeIcon]="rteBadgeIcon"\n    `)\n  })\n}',...IconBadge.parameters?.docs?.source}}},BadgeDisplay.parameters={...BadgeDisplay.parameters,docs:{...BadgeDisplay.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeIcon: "notification",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n    <div style="display: flex; flex-direction: column; align-items: center; font-family: \'Nunito Sans\', sans-serif;">\n      <h4>Appearance: Text</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n            data-testid="badge-text-m-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeContent="number"\n            [rteBadgeCount]="rteBadgeCount"\n        `)}\n      </div>\n      <h4>Appearance: Icon</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"  \n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n            data-testid="badge-icon-m-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeContent="icon"\n            [rteBadgeIcon]="rteBadgeIcon"\n        `)}\n    </div>\n    <h4>Appearance: Empty</h4>\n      <div style="display: flex; gap: 16px;">\n        ${mockHost(`\n            rteBadgeSize="xs"\n            rteBadgeContent="empty"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="s"  \n            rteBadgeContent="empty"\n            data-testid="badge-empty-s-host"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="m"\n            rteBadgeContent="empty"\n        `)}\n        ${mockHost(`\n            rteBadgeSize="l"\n            rteBadgeContent="empty"\n        `)}\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badgeTextS = canvas.getByTestId("badge-text-s-host").querySelector(".badge");\n    expect(badgeTextS).not.toBeVisible();\n    const badgeIconS = canvas.getByTestId("badge-icon-s-host").querySelector(".badge");\n    expect(badgeIconS).not.toBeVisible();\n    const badgeEmptyS = canvas.getByTestId("badge-empty-s-host").querySelector(".badge");\n    expect(badgeEmptyS).toBeVisible();\n    const badgeTextM = canvas.getByTestId("badge-text-m-host").querySelector(".badge");\n    expect(badgeTextM).toBeVisible();\n    const badgeIconM = canvas.getByTestId("badge-icon-m-host").querySelector(".badge");\n    expect(badgeIconM).toBeVisible();\n  }\n}',...BadgeDisplay.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeContent: "empty",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost(`\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="xs"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="s"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="m"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n                ${mockHost(`\n                    [rteBadgeContent]="rteBadgeContent"\n                    rteBadgeSize="l"\n                    [rteBadgeCount]="rteBadgeCount"\n                `)}\n            </div>\n        `\n  })\n}',...Sizes.parameters?.docs?.source}}},CountLimit.parameters={...CountLimit.parameters,docs:{...CountLimit.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "indicator",\n    rteBadgeContent: "number",\n    rteBadgeSize: "m"\n  },\n  render: args => ({\n    props: {\n      ...args,\n      count5: 5,\n      count99: 99,\n      count100: 100\n    },\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center;">\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count5"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count99"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    [rteBadgeCount]="count100"\n                `)}\n            </div>\n        `\n  })\n}',...CountLimit.parameters?.docs?.source}}},Icons.parameters={...Icons.parameters,docs:{...Icons.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeContent: "icon",\n    rteBadgeSize: "m"\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n            <div style="display: flex; gap: 16px; align-items: center; flex-wrap: wrap;">\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="notification"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="home"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="user"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="search"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="heart"\n                `)}\n                ${mockHost(`\n                    [rteBadgeType]="rteBadgeType"\n                    [rteBadgeContent]="rteBadgeContent"\n                    [rteBadgeSize]="rteBadgeSize"\n                    rteBadgeIcon="star"\n                `)}\n            </div>\n        `\n  })\n}',...Icons.parameters?.docs?.source}}},BadgeVisibility.parameters={...BadgeVisibility.parameters,docs:{...BadgeVisibility.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeContent: "number",\n    rteBadgeSize: "m",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n          <div style="display: flex; flex-direction: column; gap: 8px;">\n            ${mockHost(`\n                [rteBadgeType]="rteBadgeType"\n                [rteBadgeContent]="rteBadgeContent"\n                [rteBadgeSize]="rteBadgeSize"\n                [rteBadgeCount]="rteBadgeCount"\n            `)}\n            <hr>\n            <label>Badge Count</label>\n            <input\n              type="number"\n              [value]="rteBadgeCount"\n              (input)="rteBadgeCount = $event.target.valueAsNumber"\n              data-testid="badge-count-input"\n              aria-hidden="true"\n            />\n          </div>\n        `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badgeCountInput = canvas.getByTestId("badge-count-input");\n    const badge = canvas.getByTestId("badge");\n    expect(badge).toBeVisible();\n    await userEvent.clear(badgeCountInput);\n    await userEvent.type(badgeCountInput, "0");\n    await waitFor(() => expect(badge).not.toBeVisible());\n    await userEvent.type(badgeCountInput, "1");\n    await waitFor(() => expect(badge).toBeVisible());\n  }\n}',...BadgeVisibility.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: Default.args,\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n        <div style="display: flex; gap: 8px;">\n            ${mockHost(`\n              [rteBadgeCount]="rteBadgeCount"\n            `)}\n        </div>\n        `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const badge = canvas.getByTestId("badge");\n    await userEvent.tab();\n    expect(badge).not.toHaveFocus();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}},BadgeType.parameters={...BadgeType.parameters,docs:{...BadgeType.parameters?.docs,source:{originalSource:'{\n  args: {\n    rteBadgeType: "brand",\n    rteBadgeCount: 1\n  },\n  render: args => ({\n    props: args,\n    declarations: [BadgeDirective],\n    template: `\n      <div style="display: flex; gap: 24px; font-family: \'Nunito Sans\', sans-serif;">\n        <div>\n          <h4>Brand</h4>\n          ${mockHost(`\n            rteBadgeType="brand"\n            [rteBadgeCount]="rteBadgeCount"\n          `)}\n        </div>\n        <div>\n          <h4>Neutral</h4>\n          ${mockHost(`\n            rteBadgeType="neutral"\n            [rteBadgeCount]="rteBadgeCount"\n          `)}\n        </div>\n        <div>\n          <h4>Indicator</h4>\n          ${mockHost(`\n            rteBadgeType="indicator"\n            [rteBadgeCount]="rteBadgeCount"\n          `)} \n        </div>\n      </div>\n    `\n  })\n}',...BadgeType.parameters?.docs?.source}}}}}]);
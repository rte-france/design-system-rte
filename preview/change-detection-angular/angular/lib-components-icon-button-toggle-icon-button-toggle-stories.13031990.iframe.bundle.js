"use strict";(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[453],{"./projects/ds-rte-lib/src/lib/components/icon-button-toggle/icon-button-toggle.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CompactSizing:()=>CompactSizing,Default:()=>Default,KeyboardInteraction:()=>KeyboardInteraction,Sizing:()=>Sizing,__namedExportsOrder:()=>__namedExportsOrder,default:()=>icon_button_toggle_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),keyboard_constants=__webpack_require__("../core/constants/keyboard.constants.ts"),dist=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),icon_map=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs"),common_button_constants=__webpack_require__("../core/components/button/common/common-button.constants.ts"),icon_button_component=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon-button/icon-button.component.ts");let IconButtonToggleComponent=class IconButtonToggleComponent{constructor(){this.disabled=(0,core.input)(!1),this.name=core.input.required(),this.size=(0,core.input)("m"),this.variant=(0,core.input)("primary"),this.type=(0,core.input)("button"),this.compactSpacing=(0,core.input)(!1),this.ariaLabel=(0,core.input)(void 0),this.ariaLabelledBy=(0,core.input)(void 0),this.selected=(0,core.input)(!1),this.click=(0,core.output)(),this.buttonIconSize=(0,core.computed)(()=>common_button_constants.v[this.size()])}onClick(event){event.stopPropagation(),this.click.emit()}static{this.propDecorators={disabled:[{type:core.Input,args:[{isSignal:!0,alias:"disabled",required:!1,transform:void 0}]}],name:[{type:core.Input,args:[{isSignal:!0,alias:"name",required:!0,transform:void 0}]}],size:[{type:core.Input,args:[{isSignal:!0,alias:"size",required:!1,transform:void 0}]}],variant:[{type:core.Input,args:[{isSignal:!0,alias:"variant",required:!1,transform:void 0}]}],type:[{type:core.Input,args:[{isSignal:!0,alias:"type",required:!1,transform:void 0}]}],compactSpacing:[{type:core.Input,args:[{isSignal:!0,alias:"compactSpacing",required:!1,transform:void 0}]}],ariaLabel:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabel",required:!1,transform:void 0}]}],ariaLabelledBy:[{type:core.Input,args:[{isSignal:!0,alias:"ariaLabelledBy",required:!1,transform:void 0}]}],selected:[{type:core.Input,args:[{isSignal:!0,alias:"selected",required:!1,transform:void 0}]}],click:[{type:core.Output,args:["click"]}]}}};IconButtonToggleComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-icon-button-toggle",imports:[common.CommonModule,icon_button_component.x],standalone:!0,template:'<rte-icon-button \n  [size]="size()" \n  [name]="name()" \n  [compactSpacing]="compactSpacing()"\n  [disabled]="disabled()"\n  [ariaLabel]="ariaLabel()"\n  [ariaLabelledBy]="ariaLabelledBy()"\n  [type]="type()"\n  [variant]="variant()"\n  [appearance]="selected() ? \'filled\' : \'outlined\'"\n  (click)="onClick($event)"\n/>',changeDetection:core.ChangeDetectionStrategy.OnPush})],IconButtonToggleComponent);const icon_button_toggle_stories={title:"IconButtonToggle",component:IconButtonToggleComponent,tags:["autodocs"],argTypes:{name:{control:"select",options:[...Object.keys(icon_map.UB)].sort((a,b)=>a.localeCompare(b)),description:"Nom de l’icône à afficher",defaultValue:"check"},variant:{control:"select",options:["primary","secondary","text","transparent","danger"]},size:{control:"select",options:["s","m","l"]},compactSpacing:{control:"boolean",description:"Utiliser un espacement compact"},disabled:{control:"boolean"},selected:{control:"boolean",description:"Indique si l'icône est sélectionnée"}}},mockFn=(0,dist.fn)(),Default={args:{name:"settings",size:"m",disabled:!1,compactSpacing:!1,variant:"primary",ariaLabel:"icon button aria label",click:mockFn,selected:!1},play:(_ref=(0,asyncToGenerator.A)(function*({canvasElement}){const iconButton=(0,dist.ux)(canvasElement).getByRole("button");yield dist.Q4.click(iconButton),(0,dist.E3)(mockFn).toHaveBeenCalled(),iconButton.blur()}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Sizing={args:{...Default.args,compactSpacing:!1},render:args=>({props:{...args},template:`\n    <div style="display: flex; gap: 8px">\n      <rte-icon-button-toggle \n        size="s" \n        name=${args.name} \n        data-testid="small-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n      <rte-icon-button-toggle\n        name=${args.name} \n        data-testid="medium-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n      <rte-icon-button-toggle \n        size="l" \n        name=${args.name} \n        data-testid="large-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n    </div>\n    `}),play:(_ref2=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,dist.ux)(canvasElement),smallIconButton=canvas.getByTestId("small-icon-button").getElementsByTagName("button")[0],mediumIconButton=canvas.getByTestId("medium-icon-button").getElementsByTagName("button")[0],largeIconButton=canvas.getByTestId("large-icon-button").getElementsByTagName("button")[0];(0,dist.E3)(smallIconButton.clientHeight).toBe(24),(0,dist.E3)(mediumIconButton.clientHeight).toBe(32),(0,dist.E3)(largeIconButton.clientHeight).toBe(40)}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const CompactSizing={args:{...Default.args,compactSpacing:!0},render:args=>({props:{...args},template:`\n    <div style="display: flex; gap: 8px">\n      <rte-icon-button-toggle \n        size="s" \n        name=${args.name} \n        data-testid="small-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n      <rte-icon-button-toggle \n        name=${args.name} \n        data-testid="medium-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n      <rte-icon-button-toggle \n        size="l" \n        name=${args.name} \n        data-testid="large-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="'Small Icon Button'"\n        [type]="'${args.type}'"\n        [variant]="'${args.variant}'"\n      />\n    </div>\n    `}),play:(_ref3=(0,asyncToGenerator.A)(function*({canvasElement}){const canvas=(0,dist.ux)(canvasElement),smallIconButton=canvas.getByTestId("small-icon-button").getElementsByTagName("button")[0],mediumIconButton=canvas.getByTestId("medium-icon-button").getElementsByTagName("button")[0],largeIconButton=canvas.getByTestId("large-icon-button").getElementsByTagName("button")[0];(0,dist.E3)(smallIconButton.clientHeight).toBe(16),(0,dist.E3)(mediumIconButton.clientHeight).toBe(20),(0,dist.E3)(largeIconButton.clientHeight).toBe(24)}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const KeyboardInteraction={args:{...Default.args},play:(_ref4=(0,asyncToGenerator.A)(function*({canvasElement}){const button=(0,dist.ux)(canvasElement).getByRole("button");yield dist.Q4.tab(),(0,dist.E3)(button).toHaveFocus(),yield dist.Q4.keyboard(keyboard_constants.jD),yield dist.Q4.keyboard(keyboard_constants.zP),(0,dist.E3)(mockFn).toHaveBeenCalledTimes(2),button.blur()}),function play(_x4){return _ref4.apply(this,arguments)})};var _ref4;const __namedExportsOrder=["Default","Sizing","CompactSizing","KeyboardInteraction"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    name: "settings",\n    size: "m",\n    disabled: false,\n    compactSpacing: false,\n    variant: "primary",\n    ariaLabel: "icon button aria label",\n    click: mockFn,\n    selected: false\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const iconButton = canvas.getByRole("button");\n    await userEvent.click(iconButton);\n    expect(mockFn).toHaveBeenCalled();\n    iconButton.blur();\n  }\n}',...Default.parameters?.docs?.source}}},Sizing.parameters={...Sizing.parameters,docs:{...Sizing.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    compactSpacing: false\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="display: flex; gap: 8px">\n      <rte-icon-button-toggle \n        size="s" \n        name=${args.name} \n        data-testid="small-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n      <rte-icon-button-toggle\n        name=${args.name} \n        data-testid="medium-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n      <rte-icon-button-toggle \n        size="l" \n        name=${args.name} \n        data-testid="large-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const smallIconButton = canvas.getByTestId("small-icon-button").getElementsByTagName("button")[0];\n    const mediumIconButton = canvas.getByTestId("medium-icon-button").getElementsByTagName("button")[0];\n    const largeIconButton = canvas.getByTestId("large-icon-button").getElementsByTagName("button")[0];\n    expect(smallIconButton.clientHeight).toBe(24);\n    expect(mediumIconButton.clientHeight).toBe(32);\n    expect(largeIconButton.clientHeight).toBe(40);\n  }\n}',...Sizing.parameters?.docs?.source}}},CompactSizing.parameters={...CompactSizing.parameters,docs:{...CompactSizing.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    compactSpacing: true\n  },\n  render: args => ({\n    props: {\n      ...args\n    },\n    template: `\n    <div style="display: flex; gap: 8px">\n      <rte-icon-button-toggle \n        size="s" \n        name=${args.name} \n        data-testid="small-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n      <rte-icon-button-toggle \n        name=${args.name} \n        data-testid="medium-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n      <rte-icon-button-toggle \n        size="l" \n        name=${args.name} \n        data-testid="large-icon-button" \n        [compactSpacing]="${args.compactSpacing}" \n        [disabled]="${args.disabled}"\n        [selected]="${args.selected}"\n        [ariaLabel]="\'Small Icon Button\'"\n        [type]="\'${args.type}\'"\n        [variant]="\'${args.variant}\'"\n      />\n    </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const smallIconButton = canvas.getByTestId("small-icon-button").getElementsByTagName("button")[0];\n    const mediumIconButton = canvas.getByTestId("medium-icon-button").getElementsByTagName("button")[0];\n    const largeIconButton = canvas.getByTestId("large-icon-button").getElementsByTagName("button")[0];\n    expect(smallIconButton.clientHeight).toBe(16);\n    expect(mediumIconButton.clientHeight).toBe(20);\n    expect(largeIconButton.clientHeight).toBe(24);\n  }\n}',...CompactSizing.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByRole("button");\n    await userEvent.tab();\n    expect(button).toHaveFocus();\n    await userEvent.keyboard(ENTER_KEY);\n    await userEvent.keyboard(SPACE_KEY);\n    expect(mockFn).toHaveBeenCalledTimes(2);\n    button.blur();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}}}}]);
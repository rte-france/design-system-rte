(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[20235],{"./projects/ds-rte-lib/src/lib/components/divider/divider.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,HorizontalSizes:()=>HorizontalSizes,InverseColor:()=>InverseColor,SquaredEnd:()=>SquaredEnd,VerticalSizes:()=>VerticalSizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>divider_component_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var divider_componentngResource=__webpack_require__("./projects/ds-rte-lib/src/lib/components/divider/divider.component.scss?ngResource"),divider_componentngResource_default=__webpack_require__.n(divider_componentngResource),common=__webpack_require__("../../node_modules/@angular/common/fesm2022/common.mjs"),core=__webpack_require__("../../node_modules/@angular/core/fesm2022/core.mjs");let DividerComponent=class DividerComponent{constructor(){this.orientation=(0,core.input)("horizontal"),this.thickness=(0,core.input)("light"),this.appearance=(0,core.input)("default"),this.endPoint=(0,core.input)("round"),this.isHorizontal=(0,core.computed)(()=>"horizontal"===this.orientation())}static{this.propDecorators={orientation:[{type:core.Input,args:[{isSignal:!0,alias:"orientation",required:!1,transform:void 0}]}],thickness:[{type:core.Input,args:[{isSignal:!0,alias:"thickness",required:!1,transform:void 0}]}],appearance:[{type:core.Input,args:[{isSignal:!0,alias:"appearance",required:!1,transform:void 0}]}],endPoint:[{type:core.Input,args:[{isSignal:!0,alias:"endPoint",required:!1,transform:void 0}]}]}}};DividerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"rte-divider",imports:[common.CommonModule],standalone:!0,template:'@if (isHorizontal()) {\n  <hr class="horizontal {{thickness()}} {{appearance()}} {{endPoint()}}" />\n} @else {\n  <div class="vertical {{thickness()}} {{appearance()}} {{endPoint()}}" role="separator"></div>\n}',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[divider_componentngResource_default()]})],DividerComponent);const divider_component_stories={title:"Divider",component:DividerComponent,tags:["autodocs"],parameters:{layout:"centered"},decorators:[(0,dist.componentWrapperDecorator)(story=>`<div style="height: 100px; width: 500px;">${story}</div>`)],argTypes:{orientation:{control:"select",options:["horizontal","vertical"],description:"Orientation of the divider"},thickness:{control:"select",options:["light","medium","bold"],description:"Thickness of the divider"},appearance:{control:"select",options:["default","inverse"],description:"Color of the divider"},endPoint:{control:"select",options:["round","square"],description:"End point style of the divider"},isHorizontal:{table:{disable:!0}}}},Default={args:{orientation:"horizontal",thickness:"light",endPoint:"round"}},VerticalSizes={args:{orientation:"vertical",thickness:"light",endPoint:"round"},render:args=>({props:args,template:'\n        <div style="display: flex; justify-content: space-between; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="vertical"\n                thickness="light"\n                data-testid="vertical-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="vertical"\n                thickness="medium"\n                data-testid="vertical-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="vertical"\n                thickness="bold"\n                data-testid="vertical-bold-divider">\n            </rte-divider>\n        </div>\n        '})},HorizontalSizes={args:{orientation:"horizontal",thickness:"light"},render:args=>({props:args,template:'\n        <div style="display: flex; flex-direction: column; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="horizontal"\n                thickness="light"\n                data-testid="horizontal-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="medium"\n                data-testid="horizontal-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="bold"\n                data-testid="horizontal-bold-divider">\n            </rte-divider>\n        </div>\n        '})},SquaredEnd={args:{orientation:"horizontal",thickness:"light",endPoint:"square"},render:args=>({props:args,template:'\n        <div style="display: flex; flex-direction: column; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="horizontal"\n                thickness="light"\n                endPoint="square"\n                data-testid="horizontal-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="medium"\n                endPoint="square"\n                data-testid="horizontal-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="bold"\n                endPoint="square"\n                data-testid="horizontal-bold-divider">\n            </rte-divider>\n        </div>\n        '})},InverseColor={args:{orientation:"horizontal",thickness:"light",appearance:"inverse"},decorators:[(0,dist.componentWrapperDecorator)(story=>`<div style="background-color: #214770; width: 100%; padding: 20px;">${story}</div>`)],render:args=>({props:args,template:'\n                <div style="display: flex; flex-direction: column; gap: 20px; justify-content: space-between; width: 500px;">\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="light"\n                                appearance="inverse"\n                                data-testid="inverse-light-divider">\n                        </rte-divider>\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="medium"\n                                appearance="inverse"\n                                data-testid="inverse-medium-divider">\n                        </rte-divider>\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="bold"\n                                appearance="inverse"\n                                data-testid="inverse-bold-divider">\n                        </rte-divider>\n                </div>\n                '})},__namedExportsOrder=["Default","VerticalSizes","HorizontalSizes","SquaredEnd","InverseColor"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    orientation: "horizontal",\n    thickness: "light",\n    endPoint: "round"\n  }\n}',...Default.parameters?.docs?.source}}},VerticalSizes.parameters={...VerticalSizes.parameters,docs:{...VerticalSizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    orientation: "vertical",\n    thickness: "light",\n    endPoint: "round"\n  },\n  render: args => ({\n    props: args,\n    template: `\n        <div style="display: flex; justify-content: space-between; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="vertical"\n                thickness="light"\n                data-testid="vertical-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="vertical"\n                thickness="medium"\n                data-testid="vertical-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="vertical"\n                thickness="bold"\n                data-testid="vertical-bold-divider">\n            </rte-divider>\n        </div>\n        `\n  })\n}',...VerticalSizes.parameters?.docs?.source}}},HorizontalSizes.parameters={...HorizontalSizes.parameters,docs:{...HorizontalSizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    orientation: "horizontal",\n    thickness: "light"\n  },\n  render: args => ({\n    props: args,\n    template: `\n        <div style="display: flex; flex-direction: column; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="horizontal"\n                thickness="light"\n                data-testid="horizontal-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="medium"\n                data-testid="horizontal-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="bold"\n                data-testid="horizontal-bold-divider">\n            </rte-divider>\n        </div>\n        `\n  })\n}',...HorizontalSizes.parameters?.docs?.source}}},SquaredEnd.parameters={...SquaredEnd.parameters,docs:{...SquaredEnd.parameters?.docs,source:{originalSource:'{\n  args: {\n    orientation: "horizontal",\n    thickness: "light",\n    endPoint: "square"\n  },\n  render: args => ({\n    props: args,\n    template: `\n        <div style="display: flex; flex-direction: column; gap: 20px; height: 100px; width: 500px;">\n            <rte-divider\n                orientation="horizontal"\n                thickness="light"\n                endPoint="square"\n                data-testid="horizontal-light-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="medium"\n                endPoint="square"\n                data-testid="horizontal-medium-divider">\n            </rte-divider>\n            <rte-divider\n                orientation="horizontal"\n                thickness="bold"\n                endPoint="square"\n                data-testid="horizontal-bold-divider">\n            </rte-divider>\n        </div>\n        `\n  })\n}',...SquaredEnd.parameters?.docs?.source}}},InverseColor.parameters={...InverseColor.parameters,docs:{...InverseColor.parameters?.docs,source:{originalSource:'{\n  args: {\n    orientation: "horizontal",\n    thickness: "light",\n    appearance: "inverse"\n  },\n  decorators: [componentWrapperDecorator(story => `<div style="background-color: #214770; width: 100%; padding: 20px;">${story}</div>`)],\n  render: args => ({\n    props: args,\n    template: `\n                <div style="display: flex; flex-direction: column; gap: 20px; justify-content: space-between; width: 500px;">\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="light"\n                                appearance="inverse"\n                                data-testid="inverse-light-divider">\n                        </rte-divider>\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="medium"\n                                appearance="inverse"\n                                data-testid="inverse-medium-divider">\n                        </rte-divider>\n                        <rte-divider\n                                orientation="horizontal"\n                                thickness="bold"\n                                appearance="inverse"\n                                data-testid="inverse-bold-divider">\n                        </rte-divider>\n                </div>\n                `\n  })\n}',...InverseColor.parameters?.docs?.source}}}},"./projects/ds-rte-lib/src/lib/components/divider/divider.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("../../node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght,FILL,GRAD@400,0,0&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,"@import url(https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap);"]),___CSS_LOADER_EXPORT___.push([module.id,".horizontal {\n  border: none;\n  padding: 0;\n  margin: 0;\n  width: 100%;\n}\n.horizontal.round {\n  border-radius: 999px;\n}\n.horizontal.light {\n  border-top: 1px solid var(--border-divider);\n}\n.horizontal.medium {\n  border-top: 2px solid var(--border-divider);\n}\n.horizontal.bold {\n  border-top: 4px solid var(--border-divider);\n}\n.horizontal.inverse {\n  border-top-color: var(--border-inverse);\n}\n\n.vertical {\n  height: 100%;\n  background-color: var(--border-divider);\n  margin: 0;\n  padding: 0;\n}\n.vertical.round {\n  border-radius: 999px;\n}\n.vertical.light {\n  width: 1px;\n}\n.vertical.medium {\n  width: 2px;\n}\n.vertical.bold {\n  width: 4px;\n}\n.vertical.inverse {\n  background-color: var(--border-inverse);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"../../node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map(function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content}).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"../../node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{"use strict";module.exports=function(i){return i[1]}},"./node_modules/tslib/tslib.es6.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Cg:()=>__decorate});function __decorate(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r}Object.create;Object.create;"function"==typeof SuppressedError&&SuppressedError}}]);
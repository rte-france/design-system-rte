"use strict";(self.webpackChunk_design_system_rte_angular_builder=self.webpackChunk_design_system_rte_angular_builder||[]).push([[17445],{"./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AssistiveText:()=>AssistiveText,CharacterCount:()=>CharacterCount,Default:()=>Default,Error:()=>Error,InteractionStates:()=>InteractionStates,KeyboardInteraction:()=>KeyboardInteraction,KeyboardRightIconClean:()=>KeyboardRightIconClean,KeyboardRightIconVisibility:()=>KeyboardRightIconVisibility,LabelPosition:()=>LabelPosition,LeftIcon:()=>LeftIcon,RequiredIndicator:()=>RequiredIndicator,RightIconClean:()=>RightIconClean,Sizes:()=>Sizes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),_design_system_rte_core_constants_keyboard_keyboard_constants__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../core/constants/keyboard/keyboard.constants.ts"),_storybook_test__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/test/dist/index.mjs"),_icon_icon_map__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./projects/ds-rte-lib/src/lib/components/icon/icon-map.ts"),_text_input_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./projects/ds-rte-lib/src/lib/components/text-input/text-input.component.ts");const RegularIconIds=Object.keys(_icon_icon_map__WEBPACK_IMPORTED_MODULE_1__.pL),TogglableIconIds=Object.keys(_icon_icon_map__WEBPACK_IMPORTED_MODULE_1__.kb),__WEBPACK_DEFAULT_EXPORT__={title:"TextInput",component:_text_input_component__WEBPACK_IMPORTED_MODULE_2__.f,tags:["autodocs"],argTypes:{value:{control:"text"},label:{control:"text",defaultValue:"Label"},labelPosition:{control:{type:"radio"},options:["top","side"],defaultValue:"top"},required:{control:"boolean",defaultValue:!1},showCounter:{control:"boolean",defaultValue:!1},maxLength:{control:"number",defaultValue:150},leftIcon:{control:"select",options:["",...RegularIconIds,...TogglableIconIds].sort((a,b)=>a.localeCompare(b)),description:"Nom de l’icône à afficher",defaultValue:"check"},rightIconAction:{control:{type:"select"},options:["","clean","visibilityOn","visibilityOff"],defaultValue:"clean"},showLabelRequirement:{control:"boolean",defaultValue:!1},assistiveAppearance:{control:{type:"select"},options:["description","error","success","link"],defaultValue:"description"},showAssistiveIcon:{control:"boolean"},assistiveTextLabel:{control:"text",defaultValue:""},disabled:{control:"boolean"},error:{control:"boolean"},readOnly:{control:"boolean"},valueChange:{action:"value changed"},rightIconClick:{action:"right icon clicked"}}},Default={args:{label:"Label",labelPosition:"top",required:!1,disabled:!1,showCounter:!1,showLabelRequirement:!1,assistiveAppearance:"description",showAssistiveIcon:!1,error:!1,readOnly:!1,maxLength:150,value:""}},CharacterCount={args:{...Default.args,maxLength:15,showCounter:!0,id:"text-input-add-chip"},render:args=>({props:args,template:'\n      <div data-testid="input-container">\n        <rte-text-input\n          [id]="id"\n          [label]="label"\n          [labelPosition]="labelPosition"\n          [required]="required"\n          [showCounter]="showCounter"\n          [maxLength]="maxLength"\n          [value]="value"\n          (valueChange)="valueChange($event)"\n        ></rte-text-input>\n      </div>\n    '}),play:(_ref=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement,args}){const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),textInput=canvas.getByTestId("input-container").querySelector("input"),counter=canvas.getByTestId("input-counter");yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(textInput,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vulputate libero et lorem iaculis ullamcorper. Duis dictum libero sed ultrices rutrum. Nullam hendrerit bibendum ornare. Donec consequat pellentesque lectus, quis gravida tortor luctus nec."),yield(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)(()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput.value.length).toBe(args.maxLength)),yield(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.fm)(()=>(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(counter).toHaveTextContent(`${args.maxLength}/${args.maxLength}`))}),function play(_x){return _ref.apply(this,arguments)})};var _ref;const Error={args:{...Default.args,error:!0,assistiveAppearance:"error",showAssistiveIcon:!0,assistiveTextLabel:"Error message"}},InteractionStates={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Enabled\'" [value]="value"></rte-text-input>\n        <rte-text-input [label]="\'Disabled\'" [disabled]="true"></rte-text-input>\n        <rte-text-input [label]="\'Read only\'" [value]="\'Read only text\'" [readOnly]="true" data-testid="read-only"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveTextLabel]="\'Error message\'" [assistiveAppearance]="\'error\'" [error]="true"></rte-text-input>\n      </div>\n    '}),play:(_ref2=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const rightIcon=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement).getByTestId("read-only").querySelector("rte-icon");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(rightIcon).not.toBeInTheDocument()}),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const Sizes={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Default width (300px)</h3>\n          <rte-text-input [label]="\'Default\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>20px width (truncated to min-width 48px)</h3>\n          <rte-text-input [label]="\'20px\'" [width]="\'20px\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>100% width</h3>\n          <rte-text-input [label]="\'100%\'" [width]="\'100%\'"></rte-text-input>\n        </div>\n      </div>\n    '})},LabelPosition={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Top\'" [labelPosition]="\'top\'"></rte-text-input>\n        <rte-text-input [label]="\'Side\'" [labelPosition]="\'side\'"></rte-text-input>\n      </div>\n    '})},RequiredIndicator={args:{...Default.args},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n      </div>\n    '})},AssistiveText={args:{...Default.args,assistiveTextLabel:"Assistive text"},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Description\'" [assistiveAppearance]="\'description\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveAppearance]="\'error\'" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success\'" [assistiveAppearance]="\'success\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Link\'" [assistiveAppearance]="\'link\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error + icon\'" [assistiveAppearance]="\'error\'" [showAssistiveIcon]="true" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success + icon\'" [assistiveAppearance]="\'success\'" [showAssistiveIcon]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n      </div>\n    '})},LeftIcon={args:{...Default.args,leftIcon:"search"},render:args=>({props:args,template:'\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Search icon\'" [leftIcon]="\'search\'"></rte-text-input>\n        <rte-text-input [label]="\'Search icon + error\'" [leftIcon]="\'search\'" [error]="true" data-testid="error"></rte-text-input>\n      </div>\n    '}),play:(_ref3=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const leftIcon=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement).getByTestId("error").querySelector("rte-icon");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(leftIcon).toBeVisible(),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(leftIcon).toHaveAttribute("ng-reflect-name","error")}),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const RightIconClean={args:{...Default.args,rightIconAction:"clean",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref4=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const canvas=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement),textInput=canvas.getByTestId("input").querySelector("input");let rightIcon=canvas.queryByTestId("right-icon");(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(rightIcon).not.toBeInTheDocument(),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(textInput,"Hello"),rightIcon=canvas.getByTestId("right-icon"),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab(),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(rightIcon).toBeInTheDocument(),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(_design_system_rte_core_constants_keyboard_keyboard_constants__WEBPACK_IMPORTED_MODULE_4__.zP),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveValue(""),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(rightIcon).not.toBeInTheDocument()}),function play(_x4){return _ref4.apply(this,arguments)})};var _ref4;const KeyboardInteraction={args:{...Default.args},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input"></rte-text-input>'}),play:(_ref5=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const textInput=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement).getByTestId("input").querySelector("input");yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab(),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveFocus()}),function play(_x5){return _ref5.apply(this,arguments)})};var _ref5;const KeyboardRightIconClean={args:{...Default.args,rightIconAction:"clean",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref6=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const textInput=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement).getByTestId("input").querySelector("input");yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(textInput,"Hello"),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab(),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(_design_system_rte_core_constants_keyboard_keyboard_constants__WEBPACK_IMPORTED_MODULE_4__.zP),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveValue("")}),function play(_x6){return _ref6.apply(this,arguments)})};var _ref6;const KeyboardRightIconVisibility={args:{...Default.args,rightIconAction:"visibilityOff",showRightIcon:!0},render:args=>({props:args,template:'<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>'}),play:(_ref7=(0,_home_runner_work_design_system_rte_design_system_rte_packages_angular_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_3__.A)(function*({canvasElement}){const textInput=(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.ux)(canvasElement).getByTestId("input").querySelector("input");yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.type(textInput,"Hello"),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.tab(),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveAttribute("type","text"),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(_design_system_rte_core_constants_keyboard_keyboard_constants__WEBPACK_IMPORTED_MODULE_4__.zP),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveAttribute("type","password"),yield _storybook_test__WEBPACK_IMPORTED_MODULE_0__.Q4.keyboard(_design_system_rte_core_constants_keyboard_keyboard_constants__WEBPACK_IMPORTED_MODULE_4__.zP),(0,_storybook_test__WEBPACK_IMPORTED_MODULE_0__.E3)(textInput).toHaveAttribute("type","text")}),function play(_x7){return _ref7.apply(this,arguments)})};var _ref7;const __namedExportsOrder=["Default","CharacterCount","Error","InteractionStates","Sizes","LabelPosition","RequiredIndicator","AssistiveText","LeftIcon","RightIconClean","KeyboardInteraction","KeyboardRightIconClean","KeyboardRightIconVisibility"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Label",\n    labelPosition: "top",\n    required: false,\n    disabled: false,\n    showCounter: false,\n    showLabelRequirement: false,\n    assistiveAppearance: "description",\n    showAssistiveIcon: false,\n    error: false,\n    readOnly: false,\n    maxLength: 150,\n    value: ""\n  }\n}',...Default.parameters?.docs?.source}}},CharacterCount.parameters={...CharacterCount.parameters,docs:{...CharacterCount.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    maxLength: 15,\n    showCounter: true,\n    id: "text-input-add-chip"\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div data-testid="input-container">\n        <rte-text-input\n          [id]="id"\n          [label]="label"\n          [labelPosition]="labelPosition"\n          [required]="required"\n          [showCounter]="showCounter"\n          [maxLength]="maxLength"\n          [value]="value"\n          (valueChange)="valueChange($event)"\n        ></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    const inputContainer = canvas.getByTestId("input-container");\n    const textInput = inputContainer.querySelector("input");\n    const counter = canvas.getByTestId("input-counter");\n    await userEvent.type(textInput!, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vulputate libero et lorem iaculis ullamcorper. Duis dictum libero sed ultrices rutrum. Nullam hendrerit bibendum ornare. Donec consequat pellentesque lectus, quis gravida tortor luctus nec.");\n    await waitFor(() => expect(textInput!.value.length).toBe(args.maxLength));\n    await waitFor(() => expect(counter).toHaveTextContent(`${args.maxLength}/${args.maxLength}`));\n  }\n}',...CharacterCount.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    error: true,\n    assistiveAppearance: "error",\n    showAssistiveIcon: true,\n    assistiveTextLabel: "Error message"\n  }\n}',...Error.parameters?.docs?.source}}},InteractionStates.parameters={...InteractionStates.parameters,docs:{...InteractionStates.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Enabled\'" [value]="value"></rte-text-input>\n        <rte-text-input [label]="\'Disabled\'" [disabled]="true"></rte-text-input>\n        <rte-text-input [label]="\'Read only\'" [value]="\'Read only text\'" [readOnly]="true" data-testid="read-only"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveTextLabel]="\'Error message\'" [assistiveAppearance]="\'error\'" [error]="true"></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const readOnlyInput = canvas.getByTestId("read-only");\n    const rightIcon = readOnlyInput.querySelector("rte-icon");\n    expect(rightIcon).not.toBeInTheDocument();\n  }\n}',...InteractionStates.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Default width (300px)</h3>\n          <rte-text-input [label]="\'Default\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>20px width (truncated to min-width 48px)</h3>\n          <rte-text-input [label]="\'20px\'" [width]="\'20px\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>100% width</h3>\n          <rte-text-input [label]="\'100%\'" [width]="\'100%\'"></rte-text-input>\n        </div>\n      </div>\n    `\n  })\n}',...Sizes.parameters?.docs?.source}}},LabelPosition.parameters={...LabelPosition.parameters,docs:{...LabelPosition.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Top\'" [labelPosition]="\'top\'"></rte-text-input>\n        <rte-text-input [label]="\'Side\'" [labelPosition]="\'side\'"></rte-text-input>\n      </div>\n    `\n  })\n}',...LabelPosition.parameters?.docs?.source}}},RequiredIndicator.parameters={...RequiredIndicator.parameters,docs:{...RequiredIndicator.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <div>\n          <h3>Required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [required]="true" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (show label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [showLabelRequirement]="true"></rte-text-input>\n        </div>\n        <div>\n          <h3>Not required (hide label requirement)</h3>\n          <rte-text-input [width]="\'400px\'" [label]="\'Label\'" [assistiveAppearance]="\'error\'"></rte-text-input>\n        </div>\n      </div>\n    `\n  })\n}',...RequiredIndicator.parameters?.docs?.source}}},AssistiveText.parameters={...AssistiveText.parameters,docs:{...AssistiveText.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    assistiveTextLabel: "Assistive text"\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Description\'" [assistiveAppearance]="\'description\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error\'" [assistiveAppearance]="\'error\'" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success\'" [assistiveAppearance]="\'success\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Link\'" [assistiveAppearance]="\'link\'" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Error + icon\'" [assistiveAppearance]="\'error\'" [showAssistiveIcon]="true" [error]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n        <rte-text-input [label]="\'Success + icon\'" [assistiveAppearance]="\'success\'" [showAssistiveIcon]="true" [assistiveTextLabel]="assistiveTextLabel"></rte-text-input>\n      </div>\n    `\n  })\n}',...AssistiveText.parameters?.docs?.source}}},LeftIcon.parameters={...LeftIcon.parameters,docs:{...LeftIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    leftIcon: "search"\n  },\n  render: args => ({\n    props: args,\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 32px; font-family: Nunito Sans">\n        <rte-text-input [label]="\'Search icon\'" [leftIcon]="\'search\'"></rte-text-input>\n        <rte-text-input [label]="\'Search icon + error\'" [leftIcon]="\'search\'" [error]="true" data-testid="error"></rte-text-input>\n      </div>\n    `\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const errorInput = canvas.getByTestId("error");\n    const leftIcon = errorInput.querySelector("rte-icon");\n    expect(leftIcon).toBeVisible();\n    expect(leftIcon).toHaveAttribute("ng-reflect-name", "error");\n  }\n}',...LeftIcon.parameters?.docs?.source}}},RightIconClean.parameters={...RightIconClean.parameters,docs:{...RightIconClean.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "clean",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    let rightIcon = canvas.queryByTestId("right-icon");\n    expect(rightIcon).not.toBeInTheDocument();\n    await userEvent.type(textInput!, "Hello");\n    rightIcon = canvas.getByTestId("right-icon");\n    await userEvent.tab();\n    expect(rightIcon).toBeInTheDocument();\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveValue("");\n    expect(rightIcon).not.toBeInTheDocument();\n  }\n}',...RightIconClean.parameters?.docs?.source}}},KeyboardInteraction.parameters={...KeyboardInteraction.parameters,docs:{...KeyboardInteraction.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.tab();\n    expect(textInput).toHaveFocus();\n  }\n}',...KeyboardInteraction.parameters?.docs?.source}}},KeyboardRightIconClean.parameters={...KeyboardRightIconClean.parameters,docs:{...KeyboardRightIconClean.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "clean",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.type(textInput!, "Hello");\n    await userEvent.tab();\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveValue("");\n  }\n}',...KeyboardRightIconClean.parameters?.docs?.source}}},KeyboardRightIconVisibility.parameters={...KeyboardRightIconVisibility.parameters,docs:{...KeyboardRightIconVisibility.parameters?.docs,source:{originalSource:'{\n  args: {\n    ...Default.args,\n    rightIconAction: "visibilityOff",\n    showRightIcon: true\n  },\n  render: args => ({\n    props: args,\n    template: `<rte-text-input [label]="label" data-testid="input" [rightIconAction]="rightIconAction" [showRightIcon]="showRightIcon"></rte-text-input>`\n  }),\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const textInput = canvas.getByTestId("input").querySelector("input");\n    await userEvent.type(textInput!, "Hello");\n    await userEvent.tab();\n    expect(textInput).toHaveAttribute("type", "text");\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveAttribute("type", "password");\n    await userEvent.keyboard(SPACE_KEY);\n    expect(textInput).toHaveAttribute("type", "text");\n  }\n}',...KeyboardRightIconVisibility.parameters?.docs?.source}}}}}]);